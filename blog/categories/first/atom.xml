<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: First | My Little Garden of Code]]></title>
  <link href="http://philtomson.github.io/blog/categories/first/atom.xml" rel="self"/>
  <link href="http://philtomson.github.io/"/>
  <updated>2017-02-03T15:54:21-08:00</updated>
  <id>http://philtomson.github.io/</id>
  <author>
    <name><![CDATA[Phil Tomson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://philtomson.github.io/blog/2013/01/01/first-post/"/>
    <updated>2013-01-01T12:04:00-08:00</updated>
    <id>http://philtomson.github.io/blog/2013/01/01/first-post</id>
    <content type="html"><![CDATA[<p>This is my GitHub blog.</p>

<p>Here&rsquo;s a test code snippet:</p>

<pre><code class="ruby Discover if a number is prime ">class Fixnum
  def prime?
    ('1' * self) !~ /^1?$|^(11+?)\1+$/
  end
end
</code></pre>

<p>Test Gist embedding:
<div><script src='https://gist.github.com/2629106.js'></script>
<noscript><pre><code>(* POSET probably works better than RING here  *)
module type RING = 
  sig
    type t
    val max : t
    val min : t
    val succ : t -&gt; t
    val val_to_s : t -&gt; string
  end


(* Create a &quot;counter&quot; which is a list of values of type RING *)
module Counter (V_type : RING) = 
  struct 
  include V_type
  let rec next ops = match ops with
      [] -&gt; []
    | o::os -&gt; if o = max then
                 (succ o)::(next os)
               else
                 (succ o)::os 

  let rec max_val vs = List.for_all (fun x -&gt; (x = max)) vs



 let to_s_lst opslst = 
    List.rev (List.map (fun x -&gt; val_to_s x) opslst) 

  let to_s opslst = 
    let los = to_s_lst opslst in
    String.concat &quot;,&quot; los

  let count_full vs = 
    let count = ref vs in
    while ( not (max_val !count )) do
      Printf.printf &quot;%s\n&quot; (to_s !count);
      count := next !count
    done ;
    (* one last time *)
    Printf.printf &quot;%s\n&quot; (to_s !count);
      
  end

module Ops = 
  struct
    type t = C | P | M | T | D 

    let max = D

    let min = C

    let val_to_s o = match o with
        C -&gt; &quot;C&quot;
      | P -&gt; &quot;+&quot;
      | M -&gt; &quot;-&quot;
      | T -&gt; &quot;*&quot;
      | D -&gt; &quot;/&quot; 

    let succ o = match o with
      | C -&gt; P
      | P -&gt; M
      | M -&gt; T
      | T -&gt; D  
      | D -&gt; C 

  end

module Binary = 
  struct
    type t = F | T 
    let max = T
    let min = F

    let val_to_s b = match b with 
      F -&gt; &quot;F&quot;
    | T -&gt; &quot;T&quot; 

    let succ b = match b with
      F -&gt; T
    | T -&gt; F

  end


  module OpCounter = Counter(Ops)

  module BinCounter = Counter(Binary)



  open OpCounter
  open Ops

let test = next (next (next (next (next (next (next (next (next (next
[C;C;C]))))))))) ;;
let test_str = to_s test;;
Printf.printf &quot;[%s]\n&quot; (test_str) ;;
count_full [C;C;C] ;;

  open BinCounter
  open Binary
let test = next (next (next (next (next (next (next (next (next (next
[F;F;F;F]))))))))) ;;
let test_str = to_s test;;
Printf.printf &quot;[%s]\n&quot; (test_str) ;;
count_full [F;F;F] ;;
</code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
