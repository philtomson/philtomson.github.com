<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Little Garden of Code]]></title>
  <link href="http://philtomson.github.io/atom.xml" rel="self"/>
  <link href="http://philtomson.github.io/"/>
  <updated>2017-02-03T15:54:21-08:00</updated>
  <id>http://philtomson.github.io/</id>
  <author>
    <name><![CDATA[Phil Tomson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FUNemployment]]></title>
    <link href="http://philtomson.github.io/blog/2017/02/02/funemployment/"/>
    <updated>2017-02-02T16:49:19-08:00</updated>
    <id>http://philtomson.github.io/blog/2017/02/02/funemployment</id>
    <content type="html"><![CDATA[<p>I finished up a 16-month LLVM contracting gig at the end of 2016. Got the flu a couple of weeks ago and have been pretty much out of commission until today when I finally had enough mental clarity and energy to get this blog going again.</p>

<p>Since I last posted in 2014 it seems that Octopress has been updated. I had to go back to my old desktop machine and find where all the blog-related files were and transfer them to my current desktop machine. Of course I tried looking at the Octopress documentation to figure out how it works since I&rsquo;d completely forgotten in the last ~2.5 years. And of course, the docs no longer cover the old version of Octopress. So I went with the newer version and tried moving things over. For the most part it works. The twitter button that used to be over there on the right doesn&rsquo;t seem to want to show up anymore and I have no idea why (it&rsquo;s right there in the _config.yml). And pygments now seems to want a space between the language name and the &lsquo;]&rsquo; - so whereas &lsquo;[lang:ocaml]&rsquo; used to work for the code highlighting incantation, now it seems to want &lsquo;[lang:ocaml ]&rsquo; &hellip; weird.</p>

<p>So now that the blog <em>mostly</em> seems to be working again, I&rsquo;m going to be looking into BNNs <a href="https://arxiv.org/pdf/1602.02830v3.pdf.">(Binarized Neural Networks)</a>. Weights in BNNs are represented as binary values and instead of matrix multiplications (as is common in regular neural nets) the main operation on binary weights is XNOR which is a lot faster and more amenable for implementation in hardware like FPGAs. But more on BNNs later, I hope to start blogging about my BNN investigations which is why I wanted to get the blog going again.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Notes on Building and Running Mirage Unikernels on Cubieboard2]]></title>
    <link href="http://philtomson.github.io/blog/2014/09/10/some-notes-on-building-and-running-mirage-unikernels-on-cubieboard2/"/>
    <updated>2014-09-10T15:37:00-07:00</updated>
    <id>http://philtomson.github.io/blog/2014/09/10/some-notes-on-building-and-running-mirage-unikernels-on-cubieboard2</id>
    <content type="html"><![CDATA[<p><em>First a caveat: These notes reflect the state of Mirage as of the date of this post. Mirage is still in heavy development and the instructions here will change (hopefully become simpler) going forward.</em></p>

<p>These are some notes on what I had to do to get a <a href="http://mirageos.org/">Mirage</a> unikernel running under <a href="http://www.xenproject.org/">Xen</a> on a <a href="http://cubieboard.org/">cubieboard2</a>. The intent here is to document some of the gotchyas I ran into.</p>

<p><strong>Installing Xen for ARM on Cubieboard</strong></p>

<p>First download the pre-built img file from: <a href="http://blobs.openmirage.org/cubieboard2.tar">http://blobs.openmirage.org/cubieboard2.tar</a></p>

<p>Extract the img file:</p>

<pre><code>$ tar -xvf cubieboard2.tar
</code></pre>

<p>For the most part you can follow instructions <a href="https://github.com/mirage/xen-arm-builder">here</a> to copy the cubieboard2.img to a micro SD card, but I&rsquo;ll add a little more detail here.</p>

<p>When you first plug in your empty micro SD card (I have a micro SD to USB adaptor) to your Linux computer you can discover which /dev it&rsquo;s on by issuing:</p>

<pre><code>$ fdisk -l
</code></pre>

<p>On my machine it showed up at /dev/sdb. Now use dd to copy the cubieboard2.img to the empty micrSD card:</p>

<pre><code>$ dd if=cubieboard2.img of=/dev/sdb
</code></pre>

<p>After the copy is complete, plug the micro SD card into your Cubuieboard2 and boot it up. It will boot into Linaro Linux (14.04) on DOM0. If you have a USB to TTL serial cable (I got one from AdaFruit here: <a href="http://www.adafruit.com/products/954">http://www.adafruit.com/products/954</a> ) you can plug that into your cubieboard2 (white to TX, green to RX, black to GND - don&rsquo;t plug in the red wire to VCC).  Connect the other side of the cable to your Linux machine and then you can watch the cubieboard boot up by running:</p>

<pre><code>$ sudo screen /dev/ttyUSB0 115200
</code></pre>

<p>(NOTE: I&rsquo;m running Fedora 20, not sure, but other distros may need a different device in place of /dev/ttyUSB0)</p>

<p>The cubieboard will get an address on your network using DHCP. Ater it finishes booting you can log in with username: mirage    password: mirage and then run ifconfig to see what address has been assigned to it.</p>

<p>If you don&rsquo;t have a USB to TTL serial cable you can check to see what address was assigned to the cubieboard by first (prior to powering up the cubieboard) issuing:</p>

<pre><code>$  sudo arp-scan -I p4p1 192.168.1.0/16
</code></pre>

<p>(substitute your subnet for 192.168.1.0 if that isn&rsquo;t the subnet of the network you&rsquo;re on)</p>

<p>Note the devices attached to each address. Now power up your cubieboard, wait a couple of minutes and then reissue the arp command to see what new address has been added - the new address will be the address assigned by DHCP to your cubieboard.</p>

<p><strong>Install mirage on the Cubieboard</strong></p>

<p>Now that your cubieboard has booted you need to install mirage. Fortunately, the cubieboard2.img already comes with OCaml 4.01 and opam installed.  Now install mirage:</p>

<pre><code>$ opam init
$ opam install mirage-xen-minios
$ opam pin mirage https://github.com/talex5/mirage.git#link_c_stubs
$ opam pin mirage-xen https://github.com/mirage/mirage-platform
$ opam pin tcpip https://github.com/talex5/mirage-tcpip.git#checksum
$ opam install mirage    
</code></pre>

<p><strong>Try out a Mirage example </strong></p>

<p>I wanted to try out an example that uses networking on Xen which means that the OCaml TCPIP stack would be used.  There are several examples in the mirage-skeleton repo: <a href="https://github.com/mirage/mirage-skeleton">https://github.com/mirage/mirage-skeleton</a></p>

<p>Now ssh into your cubieboard and clone mirage-skeleton:</p>

<pre><code>$ git clone git@github.com:philtomson/mirage-skeleton.git
</code></pre>

<p>(Notice that I&rsquo;m pointing you to my mirage-skeleton repo, not the canonical one - I&rsquo;ve made some changes to the stackv4 example config.ml so that you can easily specify DHCP which we&rsquo;ll see a bit later, in the future, those changes will hopefully be in the main mirage-skeleton repo)</p>

<p>Now we&rsquo;ll try out stackv4 which is a simple http server example.</p>

<pre><code>$ cd mirage-skeleton/stackv4
</code></pre>

<p>Do the mirage configure, but set DHCP so that Mirage will create a main.ml file that uses DHCP instead of getting the hardcoded 10.0.0.2 (hardcoded in mirage):</p>

<pre><code>$ DHCP=1 mirage configure --xen
$ mirage build
</code></pre>

<p>Now you will have run into a problem (at least as of this date, hopefully this will be fixed in the near future). You&rsquo;ll see this error:</p>

<pre><code>stackv4      ld: cannot find -lpthread
stackv4      ld: cannot find -lcrypto
stackv4      ld: cannot find -lssl
stackv4      make: build Error 1 
</code></pre>

<p>As it turns out, you don&rsquo;t need those libraries, so edit the Makefile to remove the lines :</p>

<pre><code>-lpthread \
-lcrypto \
-lssl \
</code></pre>

<p>Save the edited Makefile and run (again):</p>

<pre><code>$ mirage build
$ make run
</code></pre>

<p>Notice the following message that comes from the <em>make run</em>:</p>

<pre><code>stackv4.xl has been created. _Edit it to add VIFs_ or VBDs
Then do something similar to: xl create -c stackv4.xl
</code></pre>

<p>So now you need to edit the stackv4.xl, notice that it already has the following commented line:</p>

<pre><code># vif = [ 'mac=c0:ff:ee:c0:ff:ee,bridge=br0' ]
</code></pre>

<p>Edit it to remove the comment (#) and get rid of the mac address (I do not know if it is correct and since it possibly isn&rsquo;t, and we don&rsquo;t need it, best to just get rid of it. Make it look like:</p>

<pre><code>vif = [ 'bridge=br0' ]
</code></pre>

<p>As an aside, where did the <em>br0</em> come from?  It&rsquo;s possible you need something else there. Certainly I&rsquo;ve seen other documents that had another identifier there. In order to figure out what it should be you should run:</p>

<pre><code>$ brctl show
</code></pre>

<p>The result will be something like:</p>

<pre><code>bridge name bridge id       STP enabled interfaces
br0     8000.02d908c0a687   no      eth0
</code></pre>

<p>The bridge name is what you&rsquo;re going to want in the vif line above. In my case the comment matched the output of <em>brctl</em> so no change needed.</p>

<p>And now the moment we&rsquo;ve been waiting for&hellip; start up that unikernel:</p>

<pre><code> sudo  xl create -c stackv4.xl   
</code></pre>

<p>If all went well, you should see that it reports the address it gets from DHCP:</p>

<pre><code> ...
 DHCP: offer received: 192.168.1.11
 ...
 DHCP: offer 192.168.1.11 255.255.255.0 [192.168.1.1]
  sg:true gso_tcpv4:true rx_copy:true rx_flip:false smart_poll:false
 ARP: sending gratuitous from 192.168.1.11
 DHCP offer received and bound
 Manager: configuration done
 IP address: 192.168.1.11
</code></pre>

<p>Now you can use curl on another machine on your network to see the hello world message:</p>

<pre><code>$ curl http://192.168.1.11
hello mirage world!
</code></pre>

<p>And there you have it.</p>

<p><strong>Shutting down the server</strong></p>

<p>To shut down that mirage unikernel server on the cubieboard, issue the following:</p>

<pre><code>$ sudo xl list
Name                                        ID   Mem VCPUs  State   Time(s)
Domain-0                                     0   512     2     r-----     194.3
stackv4                                     11   256     1     -b----       0.1
</code></pre>

<p><em>stackv4</em> is the one you want to stop (don&rsquo;t stop Domain-0 as that&rsquo;s the Linux instance running in DOM0 of Xen - the one you&rsquo;re typing commands into)</p>

<pre><code>$ sudo xl destroy stackv4
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cooperative Concurrency in OCaml: A Core.Std.Async Example]]></title>
    <link href="http://philtomson.github.io/blog/2014/07/09/core-dot-async-example/"/>
    <updated>2014-07-09T13:39:00-07:00</updated>
    <id>http://philtomson.github.io/blog/2014/07/09/core-dot-async-example</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working on an OCaml <a href="http://mqtt.org/">Mqtt</a> client for eventual use with <a href="http://mirageos.org/">MirageOS</a>. Mqtt is a lightweight publish/subscribe messaging transport protocol that&rsquo;s aimed at embedded systems and IoT applications. Without going into much detail about the protocol, implementing it requires some form of concurrency as there is a keep-alive ping that needs to be sent from the client to the broker at regular intervals to keep the connection alive. The client can also be receiving messages from the broker and needs to be able to queue up those messages for processing.</p>

<p>When considering concurrency options for OCaml, I thought I&rsquo;d give Core.Std.Async (from here on, I&rsquo;ll just refer to it as Async) a try as it&rsquo;s covered in pretty good detail in <a href="https://realworldocaml.org/v1/en/html/concurrent-programming-with-async.html">chapter 18 of Real World OCaml</a>. Of course, I didn&rsquo;t see exactly what I needed in the examples there, so I had to play with a toy producer/consumer example for a bit. The code appears below, hopefully you&rsquo;ll find it useful if you want to try out Async:</p>

<figure class='code'><figcaption><span>[ ] [title: producer_consumer.ml] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* compile with:</span>
</span><span class='line'><span class="c">   corebuild -pkg async,unix  producer_consumer.native</span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Sys</span>
</span><span class='line'><span class="k">open</span> <span class="nn">Async</span><span class="p">.</span><span class="nc">Std</span>
</span><span class='line'><span class="k">open</span> <span class="nc">Core</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">(</span><span class="n">r</span><span class="o">,</span><span class="n">w</span><span class="o">)</span> <span class="o">=</span> <span class="nn">Pipe</span><span class="p">.</span><span class="n">create</span> <span class="bp">()</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* producer *)</span>
</span><span class='line'><span class="k">let</span> <span class="n">countup</span> <span class="n">hi</span> <span class="n">w</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">rec</span> <span class="n">loop</span> <span class="n">i</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">printf</span> <span class="s2">&quot;i=%d</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">i</span> <span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&lt;</span> <span class="n">hi</span> <span class="o">&amp;&amp;(</span> <span class="n">not</span> <span class="o">(</span><span class="nn">Pipe</span><span class="p">.</span><span class="n">is_closed</span> <span class="n">w</span><span class="o">)))</span> <span class="k">then</span>
</span><span class='line'>       <span class="nn">Pipe</span><span class="p">.</span><span class="n">write</span> <span class="n">w</span> <span class="n">i</span> <span class="o">&gt;&gt;&gt;</span>
</span><span class='line'>       <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">loop</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>     <span class="k">else</span> <span class="nn">Pipe</span><span class="p">.</span><span class="n">close</span> <span class="n">w</span>
</span><span class='line'>  <span class="k">in</span>
</span><span class='line'>  <span class="n">loop</span> <span class="mi">0</span> <span class="o">;;</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* consumer *)</span>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">readloop</span> <span class="n">r</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Pipe</span><span class="p">.</span><span class="n">read</span> <span class="n">r</span> <span class="o">&gt;&gt;=</span>
</span><span class='line'>  <span class="k">function</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">`</span><span class="nc">Eof</span> <span class="o">-&gt;</span> <span class="n">return</span> <span class="bp">()</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">`</span><span class="nc">Ok</span> <span class="n">v</span> <span class="o">-&gt;</span> <span class="n">return</span> <span class="o">(</span><span class="n">printf</span> <span class="s2">&quot;Got %d</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="n">v</span><span class="o">)</span> <span class="o">&gt;&gt;=</span>
</span><span class='line'>             <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">after</span> <span class="o">(</span><span class="nn">Time</span><span class="p">.</span><span class="nn">Span</span><span class="p">.</span><span class="n">of_sec</span> <span class="mi">0</span><span class="o">.</span><span class="mi">5</span><span class="o">)</span> <span class="o">&gt;&gt;=</span>
</span><span class='line'>             <span class="k">fun</span> <span class="bp">()</span> <span class="o">-&gt;</span> <span class="n">readloop</span> <span class="n">r</span>  <span class="o">;;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Pipe</span><span class="p">.</span><span class="n">set_size_budget</span> <span class="n">r</span> <span class="mi">256</span>  <span class="o">;</span>
</span><span class='line'>  <span class="n">countup</span> <span class="mi">10</span> <span class="n">w</span><span class="o">;</span>
</span><span class='line'>  <span class="n">ignore</span><span class="o">(</span><span class="n">readloop</span> <span class="n">r</span><span class="o">);</span>
</span><span class='line'>  <span class="nn">Core</span><span class="p">.</span><span class="nn">Never_returns</span><span class="p">.</span><span class="n">never_returns</span> <span class="o">(</span><span class="nn">Scheduler</span><span class="p">.</span><span class="n">go</span> <span class="bp">()</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Async falls under the category of cooperative concurrency along with other frameworks that have an event loop like Python&rsquo;s Twisted and Node.js. Preemptive concurrency is on the other side of the concurrency divide, and generally involves threads and mutexes. Cooperative concurrency is usually done by passing callbacks to functions that get called after some call in the function has returned data. Node.js is famous for this: you need to read data from some other website, for example, so you call your function for doing this and pass a callback to it that will actually return the data after it becomes available. Meanwhile instead of blocking waiting for the data to come back your program has gone on to call other functions in the event loop. This works fairly nicely (for some value of <em>nicely</em>) in Javascript where there are very few blocking calls&hellip; but note that <a href="http://callbackhell.com/">callback hell</a> is a thing as callbacks get nested into callbacks sometimes several layers deep.</p>

<p>Async works a bit differently, at least on the surface, from the asynchronous style of Javascript used in Node.js and this seems to help avoid the nested callback problem. Async is very monadic and that seems to help. Well-behaved Async functions don&rsquo;t block, but instead return a value of type <em>Deferred.t</em> (Async.Deferred.t). A <em>&lsquo;a Deferred.t</em> value is kind of like a <em>promise</em> in some other languages, a promise that the value you seek will be computed sometime in the future. There&rsquo;s a scheduler that schedules these deferred events.</p>

<p>In addition, Async also has these very handy <em>Pipe</em> thingys that are basically FIFOs that connect different parts of your program together in a way that is reminiscent of <a href="http://en.wikipedia.org/wiki/Kahn_process_networks">Kahn Process Networks</a>. (Async Pipes don&rsquo;t have anything to do with Unix pipes other than a very surfacy resemblence)</p>

<p>You&rsquo;ll notice that a <em>Pipe</em> is created at line 5 of the code above where <em>r</em> is the reader end of the pipe and <em>w</em> is the writer end. The <em>countup</em> function is our producer and simply counts up to a value passed in. On every iteration of the <em>loop</em> the new count value gets writen to the pipe at line 12 ( <em>Pipe.write w i</em> ). Notice that there&rsquo;s an <em>>>></em> operator at the end of that line. This is also called <em>upon</em> and could also have been written as: <em>upon (Pipe.write w i) (fun () -> loop (i+1))</em>. <em>upon</em> has the following type: <em>&lsquo;a Deferred.t -> ('a -> unit) -> unit</em>.  When the deferred value that&rsquo;s passed into <em>upon</em> is determined, the callback will be called, in this case we call <em>loop (i+1)</em> and recurse.</p>

<p>The readloop function (starting at line 19) uses the bind operator ( >>= ) which has the type: <em>&lsquo;a Deferred.t -> ('a -> 'b Deferred.t) -> 'b Deferred.t</em>. When the deferred value of <em>Pipe.read r</em>  is determined, the result is passed into the callback function which will print what was received from the pipe (on success), then wait a half second before going on to call <em>readloop</em> again. For more details about the sequencing operators >>= (<em>bind</em>), >>> (<em>upon</em>) and >>| (<em>map</em>) have a look at the <em>Real World OCaml</em> link above. Notice that we use <em>return</em> to wrap a value in a
<em>Deferred.t</em> (the type of <em>return</em> is <em>'a -> 'a Deferred.t</em>) in order to make <em>readloop</em> type-check and compile as <em>readloop</em>&rsquo;s type is: <em>int Pipe.Reader.t -> unit Deferred.t</em>.</p>

<p>So <em>countup</em> writes values to the <em>Pipe</em> while <em>readloop</em> reads values from it at half second intervals. If you compile this program and run it you&rsquo;ll see:</p>

<pre><code>i=0
i=1
Got 0
i=2
i=3
i=4
i=5
i=6
i=7
i=8
i=9
i=10
Got 1
Got 2
Got 3
Got 4
Got 5
Got 6
Got 7
Got 8
Got 9
</code></pre>

<p>The first lines up until &lsquo;i=10&rsquo; come out pretty much instantaneously, while the next lines (&lsquo;Got 1&rsquo; through &lsquo;Got 9&rsquo;) came out every half second.</p>

<p>However&hellip; Notice line 32 of the code above: <em>Pipe.set_size_budget r 256  ;</em>
Initially I thought (based on the explanation in RWO) that <em>Pipe</em>s were queues of infinite length. I didn&rsquo;t know you had to <em>set_size_budget</em> on the Pipe. So earlier attempts omitted line 32 above and I got the following result:</p>

<pre><code>i=0
i=1
Got 0
i=2
Got 1
i=3
Got 2
i=4
Got 3
i=5
Got 4
i=6
Got 5
i=7
Got 6
i=8
Got 7
i=9
Got 8
i=10
Got 9
</code></pre>

<p>(With a half second delay between each &lsquo;Got&rsquo; message)</p>

<p>The <em>Pipe.write</em> seemed to block waiting for a <em>Pipe.read</em> which didn&rsquo;t seem right given the description of <em>Pipe</em> in RWO. But as it turns out the pipe size defaults to 0 which means that the pipe fills up immediately. To get a deeper pipe, you need to call <em>set_budget_size</em> on the pipe (either end, apparently) as shown on line 32 of the code above. (Aside: It seems like there should be an optional parameter <em>budget_size</em> to the <em>Pipe.create</em> function.)</p>

<p><strong>Conclusions</strong></p>

<p>While in essense we&rsquo;re still using callbacks in our event loop (very Javascript/Node.js-ish), the monadic sequencing operators >>=, >>| and >>> do seem to make the code easier to read and reason about. Add in the handy <em>Pipe</em>s and it&rsquo;s not a bad way to do concurrency, really, once you get the hang of dealing with the monads. It should be noted, however, that as in most cooperative concurrency schemes, you&rsquo;re only going to be using one core of your processor.</p>

<p>Finally&hellip; I&rsquo;m pretty new to Core and Async so if I&rsquo;ve made some mistakes here in the explanation or if the code could be more elegant please don&rsquo;t hesitate to let me know in the comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop the Presses: OCaml Wins in Terms of Speed]]></title>
    <link href="http://philtomson.github.io/blog/2014/05/30/stop-the-presses-ocaml-wins/"/>
    <updated>2014-05-30T06:43:00-07:00</updated>
    <id>http://philtomson.github.io/blog/2014/05/30/stop-the-presses-ocaml-wins</id>
    <content type="html"><![CDATA[<h3>Benchmarking is a tricky thing.</h3>

<p>Several sharp eyes noticed some flaws in the OCaml code in my <a href="http://philtomson.github.io/blog/2014/05/29/comparing-a-machine-learning-algorithm-implemented-in-f-number-and-ocaml/">last post</a>.</p>

<p>The main problem was pointed out by Kim Nguyễn in the comments:</p>

<blockquote><p>your OCaml version is flawed&hellip; First in F# you do every computation in integer and only convert as float at the end (it seems). If you do the same in OCaml, you will gain some speed, that is:
list_sum should use 0 and +, and distance should use let x = a - b in x*x to compute the square and only call &ldquo;float&rdquo; before sqrt, as you do in F# (and therefore also call float at the end on num_correct since list_sum now returns an integer. Also the computation of num_correct should use now 1 and 0 instead of 1.0 and 0.0).</p></blockquote>

<p>I made the suggested changes to <em>distance</em> and <em>list_sum</em> :</p>

<figure class='code'><figcaption><span>[ ] [title: integer math in distance and list_sum] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">list_sum</span> <span class="n">lst</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold_left</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="n">acc</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">+</span><span class="n">acc</span><span class="o">)</span> <span class="mi">0</span> <span class="n">lst</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">distance</span> <span class="o">(</span><span class="n">p1</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">list</span><span class="o">)</span> <span class="o">(</span><span class="n">p2</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">sqrt</span> <span class="o">(</span><span class="n">float_of_int</span> <span class="o">(</span><span class="n">list_sum</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">map2</span> <span class="o">(</span> <span class="k">fun</span> <span class="n">a</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="n">diff</span> <span class="o">=</span> <span class="n">a</span><span class="o">-</span><span class="n">b</span> <span class="k">in</span>
</span><span class='line'>                                           <span class="n">diff</span><span class="o">*</span><span class="n">diff</span> <span class="o">)</span> <span class="n">p1</span> <span class="n">p2</span><span class="o">)</span> <span class="o">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those simple changes yielded a 2X speedup which puts the OCaml implementation on par with the non-parallelized F# version:</p>

<pre><code>real    0m23.874s
user    0m23.623s
sys         0m0.079s
</code></pre>

<p>Then camlspotter pointed out something about <em>float array</em> that I&rsquo;d forgotten:</p>

<blockquote><p>In addition, comparing programs using Arrays and Lists is VERY unfair. In this kind of programs with loops you cannot ignore the cost of list construction and deconstruction. In addition, <strong>OCaml&rsquo;s float array has another benefits: its contents are unboxed, while float list does not</strong>.</p></blockquote>

<p>camlspotter was kind enough to submit an <em>Array</em>ized version of the OCaml code:</p>

<figure class='code'><figcaption><span>[ ] [title: classifyDigitsArray.ml] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* OCaml version submitted by @camlspotter</span>
</span><span class='line'><span class="c">   compile with:</span>
</span><span class='line'><span class="c">    ocamlopt str.cmxa -o classifyDigitsArray classifyDigitsArray.ml </span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="c">(*</span>
</span><span class='line'><span class="c">// This F# dojo is directly inspired by the </span>
</span><span class='line'><span class="c">// Digit Recognizer competition from Kaggle.com:</span>
</span><span class='line'><span class="c">// http://www.kaggle.com/c/digit-recognizer</span>
</span><span class='line'><span class="c">// The datasets below are simply shorter versions of</span>
</span><span class='line'><span class="c">// the training dataset from Kaggle.</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// The goal of the dojo will be to</span>
</span><span class='line'><span class="c">// create a classifier that uses training data</span>
</span><span class='line'><span class="c">// to recognize hand-written digits, and</span>
</span><span class='line'><span class="c">// evaluate the quality of our classifier</span>
</span><span class='line'><span class="c">// by looking at predictions on the validation data.</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">read_lines</span> <span class="n">name</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">ic</span> <span class="o">=</span> <span class="n">open_in</span> <span class="n">name</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">try_read</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">try</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">input_line</span> <span class="n">ic</span><span class="o">)</span> <span class="k">with</span> <span class="nc">End_of_file</span> <span class="o">-&gt;</span> <span class="nc">None</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">rec</span> <span class="n">loop</span> <span class="n">acc</span> <span class="o">=</span> <span class="k">match</span> <span class="n">try_read</span> <span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span> <span class="o">::</span> <span class="n">acc</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="n">close_in</span> <span class="n">ic</span><span class="o">;</span> <span class="nn">List</span><span class="p">.</span><span class="n">rev</span> <span class="n">acc</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">loop</span> <span class="bp">[]</span>
</span><span class='line'>
</span><span class='line'><span class="c">(*</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// Two data files are included in the same place you</span>
</span><span class='line'><span class="c">// found this script: </span>
</span><span class='line'><span class="c">// trainingsample.csv, a file that contains 5,000 examples, and </span>
</span><span class='line'><span class="c">// validationsample.csv, a file that contains 500 examples.</span>
</span><span class='line'><span class="c">// The first file will be used to train your model, and the</span>
</span><span class='line'><span class="c">// second one to validate the quality of the model.</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// 1. GETTING SOME DATA</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// First let&#39;s read the contents of &quot;trainingsample.csv&quot;</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">labelPixels</span> <span class="o">=</span> <span class="o">{</span> <span class="n">label</span><span class="o">:</span> <span class="kt">int</span><span class="o">;</span> <span class="n">pixels</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">array</span> <span class="o">}</span>
</span><span class='line'><span class="k">let</span> <span class="n">slurp_file</span> <span class="n">file</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">List</span><span class="p">.</span><span class="n">tl</span> <span class="o">(</span><span class="n">read_lines</span> <span class="n">file</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">line</span> <span class="o">-&gt;</span> <span class="nn">Str</span><span class="p">.</span><span class="n">split</span> <span class="o">(</span><span class="nn">Str</span><span class="p">.</span><span class="n">regexp</span> <span class="s2">&quot;,&quot;</span><span class="o">)</span> <span class="n">line</span> <span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">numline</span> <span class="o">-&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">x</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">int_of_string</span> <span class="n">x</span><span class="o">)</span> <span class="n">numline</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">line</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="o">{</span> <span class="n">label</span><span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">hd</span> <span class="n">line</span><span class="o">;</span>
</span><span class='line'>      <span class="n">pixels</span><span class="o">=</span> <span class="nn">Array</span><span class="p">.</span><span class="n">of_list</span> <span class="o">@@</span> <span class="nn">List</span><span class="p">.</span><span class="n">tl</span> <span class="n">line</span> <span class="o">})</span>
</span><span class='line'>  <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">of_list</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">trainingset</span> <span class="o">=</span> <span class="n">slurp_file</span> <span class="s2">&quot;./trainingsample.csv&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* </span>
</span><span class='line'><span class="c">// 6. COMPUTING DISTANCES</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// We need to compute the distance between images</span>
</span><span class='line'><span class="c">// Math reminder: the euclidean distance is</span>
</span><span class='line'><span class="c">// distance [ x1; y1; z1 ] [ x2; y2; z2 ] = </span>
</span><span class='line'><span class="c">// sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2))</span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">array_fold_left2</span> <span class="n">f</span> <span class="n">acc</span> <span class="n">a1</span> <span class="n">a2</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">open</span> <span class="nc">Array</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">len</span> <span class="o">=</span> <span class="n">length</span> <span class="n">a1</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">rec</span> <span class="n">iter</span> <span class="n">acc</span> <span class="n">i</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">i</span> <span class="o">=</span> <span class="n">len</span> <span class="k">then</span> <span class="n">acc</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">v1</span> <span class="o">=</span> <span class="n">unsafe_get</span> <span class="n">a1</span> <span class="n">i</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">v2</span> <span class="o">=</span> <span class="n">unsafe_get</span> <span class="n">a2</span> <span class="n">i</span> <span class="k">in</span>
</span><span class='line'>      <span class="n">iter</span> <span class="o">(</span><span class="n">f</span> <span class="n">acc</span> <span class="n">v1</span> <span class="n">v2</span><span class="o">)</span> <span class="o">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">)</span>
</span><span class='line'>  <span class="k">in</span>
</span><span class='line'>  <span class="n">iter</span> <span class="n">acc</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">distance</span> <span class="n">p1</span> <span class="n">p2</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">sqrt</span>
</span><span class='line'>  <span class="o">@@</span> <span class="n">float_of_int</span>
</span><span class='line'>  <span class="o">@@</span> <span class="n">array_fold_left2</span> <span class="o">(</span><span class="k">fun</span> <span class="n">acc</span> <span class="n">a</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="k">let</span> <span class="n">d</span> <span class="o">=</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span> <span class="k">in</span> <span class="n">acc</span> <span class="o">+</span> <span class="n">d</span> <span class="o">*</span> <span class="n">d</span><span class="o">)</span> <span class="mi">0</span> <span class="n">p1</span> <span class="n">p2</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* </span>
</span><span class='line'><span class="c">// 7. WRITING THE CLASSIFIER FUNCTION</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// We are now ready to write a classifier function!</span>
</span><span class='line'><span class="c">// The classifier should take a set of pixels</span>
</span><span class='line'><span class="c">// (an array of ints) as an input, search for the</span>
</span><span class='line'><span class="c">// closest example in our sample, and predict</span>
</span><span class='line'><span class="c">// the value of that closest element.</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">classify</span> <span class="o">(</span><span class="n">pixels</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">array</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">fst</span> <span class="o">(</span>
</span><span class='line'>    <span class="nn">Array</span><span class="p">.</span><span class="n">fold_left</span> <span class="o">(</span><span class="k">fun</span> <span class="o">((</span><span class="n">min_label</span><span class="o">,</span> <span class="n">min_dist</span><span class="o">)</span> <span class="k">as</span> <span class="n">min</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">labelPixels</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="k">let</span> <span class="n">dist</span> <span class="o">=</span> <span class="n">distance</span> <span class="n">pixels</span> <span class="n">x</span><span class="o">.</span><span class="n">pixels</span> <span class="k">in</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">dist</span> <span class="o">&lt;</span> <span class="n">min_dist</span> <span class="k">then</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">label</span><span class="o">,</span> <span class="n">dist</span><span class="o">)</span> <span class="k">else</span> <span class="n">min</span><span class="o">)</span>
</span><span class='line'>      <span class="o">(</span><span class="n">max_int</span><span class="o">,</span> <span class="n">max_float</span><span class="o">)</span> <span class="c">(* a tiny hack *)</span>
</span><span class='line'>      <span class="n">trainingset</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">(*</span>
</span><span class='line'><span class="c">// 8. EVALUATING THE MODEL AGAINST VALIDATION DATA</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// Now that we have a classifier, we need to check</span>
</span><span class='line'><span class="c">// how good it is. </span>
</span><span class='line'><span class="c">// This is where the 2nd file, validationsample.csv,</span>
</span><span class='line'><span class="c">// comes in handy. </span>
</span><span class='line'><span class="c">// For each Example in the 2nd file,</span>
</span><span class='line'><span class="c">// we know what the true Label is, so we can compare</span>
</span><span class='line'><span class="c">// that value with what the classifier says.</span>
</span><span class='line'><span class="c">// You could now check for each 500 example in that file</span>
</span><span class='line'><span class="c">// whether your classifier returns the correct answer,</span>
</span><span class='line'><span class="c">// and compute the % correctly predicted.</span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">validationsample</span> <span class="o">=</span> <span class="n">slurp_file</span> <span class="s2">&quot;./validationsample.csv&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">num_correct</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Array</span><span class="p">.</span><span class="n">fold_left</span> <span class="o">(</span><span class="k">fun</span> <span class="n">sum</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="n">sum</span> <span class="o">+</span> <span class="k">if</span> <span class="n">classify</span> <span class="n">p</span><span class="o">.</span><span class="n">pixels</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">label</span> <span class="k">then</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span><span class="o">)</span> <span class="mi">0</span> <span class="n">validationsample</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">_</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;Percentage correct:%f</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="o">@@</span> <span class="n">float_of_int</span> <span class="n">num_correct</span> <span class="o">/.</span> <span class="n">float_of_int</span> <span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">validationsample</span><span class="o">)</span> <span class="o">*.</span><span class="mi">100</span><span class="o">.</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the non-parallelized OCaml version handily beats the parallelized F# version(by about 5 seconds):</p>

<pre><code>real    0m11.686s
user    0m11.529s
sys     0m0.092s
</code></pre>

<p>&hellip;though the code is a good bit longer than the F# version which weighed in at 58 lines.</p>

<h3>Observations:</h3>

<ol>
<li>Be very careful about where you&rsquo;re doing integer vs float math ops; stay with ints as much as possible (so long as you&rsquo;re not sacrificing accuracy).</li>
<li><em>float array</em> is preferrable to <em>float list</em> because the floats are unboxed in the former.</li>
<li>Don&rsquo;t be obsessed with making an implementation in one language look like the implementation in the comparison language. I think I was focusing too much on the similiarities of the languages to see some of the optimization opportunities. Also, since I wrote the F# version first, I tended to make the OCaml version look like the F# version (usage of <em>minBy</em>, for example, and implementing my own <em>minBy</em> in OCaml instead of using camlspotter&rsquo;s <em>Array.fold_left</em> method.)</li>
<li>The parallelization point remains: It&rsquo;s much easier in F#. How fast would this be if OCaml&rsquo;s Parmap used some kind of shared-memory implementation? The F# example was about 1.4X faster with <em>Parallel</em> so that would get the OCaml version down to ~8.5 seconds if a similar mechanism existed.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Comparing a Machine Learning Algorithm Implemented in F# and OCaml]]></title>
    <link href="http://philtomson.github.io/blog/2014/05/29/comparing-a-machine-learning-algorithm-implemented-in-f-number-and-ocaml/"/>
    <updated>2014-05-29T18:30:00-07:00</updated>
    <id>http://philtomson.github.io/blog/2014/05/29/comparing-a-machine-learning-algorithm-implemented-in-f-number-and-ocaml</id>
    <content type="html"><![CDATA[<p>(UPDATE: please see the <a href="http://philtomson.github.io/blog/2014/05/30/stop-the-presses-ocaml-wins/">next post: Stop the Presses: OCaml wins in terms of speed</a> in which it is shown that there were some serious flaws in my OCaml implementation below. I&rsquo;ll keep this post around for reference.)</p>

<p>I&rsquo;ve been dabbling with OCaml for the last several years and so when I saw a recent Meetup notice about an F# machine learning code dojo being led by <a href="https://github.com/mathias-brandewinder">Mathias Brandewinder</a> within walking distance of my house I thought I&rsquo;d check it out. I&rsquo;m one of those Linux guys who tends to eschew IDEs, prefers to use vim, and considers .NET to be some very foreign territory. F# is based on OCaml, so I figured I&rsquo;d have a bit of a headstart in the language area even if I haven&rsquo;t done any .NET development.</p>

<p>Also, I was curious as I had been hearing rumors on twitter that F# programs were running on Mono faster than the equivalent OCaml versions.  I was also taking Andrew Ng&rsquo;s Coursera Machine Learning course so the timing seemed good. So I loaded up <a href="http://www.mono-project.com/Main_Page">mono</a>, <a href="http://monodevelop.com/">monodevelop</a> and F#. As it turns out none of it worked on the day of the dojo, so I looked on with someone with a Windows laptop and Visual Studio.</p>

<p>The code dojo itself was a great way of learning F#. Check out Mathias' <a href="https://github.com/c4fsharp/Dojo-Digits-Recognizer">Digits Recognizer code Dojo code and instructions</a> which in turn was based on <a href="http://www.kaggle.com/c/digit-recognizer">a Kaggle Machine Learning challenge</a>.
The task was to implement a <a href="http://en.wikipedia.org/wiki/K-nearest_neighbors_algorithm">k-NN</a> (K Nearest Neighbor; in this case K=1) algorithm for recognizing handwritten digits from a dataset that was provided: A training set of 5000 labeled examples and a validation set of 500 labeled examples. Each digit example is a set of 28X28 grayscale pixels (784 integer values from 0 to 255).
We wrote a classifier that reads in the training set and then compares each of the 500 validation samples against those 5000 training exmples and returns the label associated with the closest match (the vector with the shortest distance from a training example). k-NN is one of the simplest machine learning algorithms, even so, we were able to get a 94.4% accuracy rate.</p>

<p>After the Dojo, I spent some time getting Monodevelop and F# running on my Ubuntu 12.04 laptop. Turns out I needed to get Monodevelop 4.0 (built from source) and F# 3.0 (initially tried F# 3.1, but Monodevelop 4.0 wasn&rsquo;t happy with that version). Then I set about reimplementing the algorithm in F# and after I got that working I reimplemented the same algorithm in OCaml.</p>

<p>Here&rsquo;s my F# implementation:</p>

<figure class='code'><figcaption><span>[ ] [title: ClassifyDigits.fs] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='fsharp'><span class='line'><span class="k">module</span> <span class="nn">classifyDigits.Main</span>
</span><span class='line'>
</span><span class='line'><span class="k">open</span> <span class="nn">System</span>
</span><span class='line'><span class="k">open</span> <span class="nn">System.IO</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="nc">LabelPixels</span> <span class="o">=</span> <span class="o">{</span> <span class="n">Label</span><span class="o">:</span> <span class="n">int</span><span class="o">;</span> <span class="n">Pixels</span><span class="o">:</span> <span class="n">int</span><span class="bp">[]</span> <span class="o">}</span>
</span><span class='line'><span class="k">let</span> <span class="nv">slurp_file</span> <span class="n">file</span> <span class="o">=</span>
</span><span class='line'>   <span class="nn">File</span><span class="p">.</span><span class="n">ReadAllLines</span><span class="o">(</span><span class="n">file</span><span class="o">).[</span><span class="mi">1</span><span class="o">..]</span>
</span><span class='line'>   <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">line</span> <span class="o">-&gt;</span> <span class="n">line</span><span class="o">.</span><span class="n">Split</span><span class="o">(</span><span class="sc">&#39;,&#39;</span><span class="o">))</span>
</span><span class='line'>   <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">numline</span> <span class="o">-&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">x</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nn">Convert</span><span class="p">.</span><span class="n">ToInt32</span><span class="o">(</span><span class="n">x</span><span class="o">))</span> <span class="n">numline</span><span class="o">)</span>
</span><span class='line'>   <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">line</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">Label</span><span class="o">=</span> <span class="n">line</span><span class="o">.[</span><span class="mi">0</span><span class="o">];</span> <span class="n">Pixels</span><span class="o">=</span><span class="n">line</span><span class="o">.[</span><span class="mi">1</span><span class="o">..]</span> <span class="o">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//load the trainingsample  </span>
</span><span class='line'><span class="k">let</span> <span class="nv">trainingset</span> <span class="o">=</span> <span class="n">slurp_file</span><span class="o">(</span><span class="s">&quot;/home/phil/devel/f_sharp/Dojo-Digits-Recognizer/Dojo/trainingsample.csv&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  COMPUTING DISTANCES</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We need to compute the distance between images</span>
</span><span class='line'><span class="c1">// Math reminder: the euclidean distance is</span>
</span><span class='line'><span class="c1">// distance [ x1; y1; z1 ] [ x2; y2; z2 ] = </span>
</span><span class='line'><span class="c1">// sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2))</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">distance</span> <span class="o">(</span><span class="n">p1</span><span class="o">:</span> <span class="n">int</span><span class="bp">[]</span><span class="o">)</span> <span class="o">(</span><span class="n">p2</span><span class="o">:</span> <span class="n">int</span><span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="nn">Math</span><span class="p">.</span><span class="n">Sqrt</span> <span class="o">(</span><span class="kt">float</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">sum</span> <span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">map2</span> <span class="o">(</span> <span class="k">fun</span> <span class="n">a</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">pown</span> <span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">)</span> <span class="mi">2</span><span class="o">))</span> <span class="n">p1</span> <span class="n">p2</span><span class="o">)</span> <span class="o">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">//  WRITING THE CLASSIFIER FUNCTION</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// We are now ready to write a classifier function!</span>
</span><span class='line'><span class="c1">// The classifier should take a set of pixels</span>
</span><span class='line'><span class="c1">// (an array of ints) as an input, search for the</span>
</span><span class='line'><span class="c1">// closest example in our sample, and predict</span>
</span><span class='line'><span class="c1">// the value of that closest element.</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">classify</span> <span class="o">(</span><span class="n">pixels</span><span class="o">:</span> <span class="n">int</span><span class="bp">[]</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">fst</span> <span class="o">(</span><span class="n">trainingset</span> <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">Label</span><span class="o">,</span> <span class="o">(</span><span class="n">distance</span> <span class="n">pixels</span> <span class="n">x</span><span class="o">.</span><span class="n">Pixels</span> <span class="o">)</span> <span class="o">))</span>
</span><span class='line'>                   <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">minBy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="n">snd</span> <span class="n">x</span> <span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// EVALUATING THE MODEL AGAINST VALIDATION DATA</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Now that we have a classifier, we need to check</span>
</span><span class='line'><span class="c1">// how good it is. </span>
</span><span class='line'><span class="c1">// This is where the 2nd file, validationsample.csv,</span>
</span><span class='line'><span class="c1">// comes in handy. </span>
</span><span class='line'><span class="c1">// For each Example in the 2nd file,</span>
</span><span class='line'><span class="c1">// we know what the true Label is, so we can compare</span>
</span><span class='line'><span class="c1">// that value with what the classifier says.</span>
</span><span class='line'><span class="c1">// You could now check for each 500 example in that file</span>
</span><span class='line'><span class="c1">// whether your classifier returns the correct answer,</span>
</span><span class='line'><span class="c1">// and compute the % correctly predicted.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="nv">_</span> <span class="o">=</span>
</span><span class='line'>    <span class="nn">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="o">(</span><span class="s">&quot;start...&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="nv">validationsample</span> <span class="o">=</span> <span class="n">slurp_file</span><span class="o">(</span><span class="s">&quot;/home/phil/devel/f_sharp/Dojo-Digits-Recognizer/Dojo/validationsample.csv&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="k">let</span> <span class="nv">num_correct</span> <span class="o">=</span> <span class="o">(</span><span class="n">validationsample</span> <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">classify</span> <span class="n">p</span><span class="o">.</span><span class="n">Pixels</span> <span class="o">)</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">Label</span> <span class="k">then</span> <span class="mi">1</span> <span class="k">else</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>                                        <span class="o">|&gt;</span> <span class="nn">Array</span><span class="p">.</span><span class="n">sum</span><span class="o">)</span>
</span><span class='line'>    <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span> <span class="s">&quot;Percentage correct:%f</span><span class="se">\n</span><span class="s">&quot;</span> <span class="o">((</span><span class="kt">float</span><span class="o">(</span><span class="n">num_correct</span><span class="o">)/</span> <span class="o">(</span><span class="kt">float</span><span class="o">(</span><span class="nn">Array</span><span class="p">.</span><span class="n">length</span> <span class="n">validationsample</span><span class="o">)))*</span><span class="mi">100</span><span class="o">.</span><span class="mi">0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Timing when running this on my Dell XPS 13 (i7 Haswell, 8GB RAM):</p>

<pre><code>real        0m22.180s
user        0m22.253s
sys         0m0.116s
</code></pre>

<p>And the OCaml implementation:</p>

<figure class='code'><figcaption><span>[ ] [title: classifyDigits.ml] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="c">(* OCaml version</span>
</span><span class='line'><span class="c">   compile with:</span>
</span><span class='line'><span class="c">    ocamlopt str.cmxa -o classifyDigits classifyDigits.ml </span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">read_lines</span> <span class="n">name</span> <span class="o">:</span> <span class="kt">string</span> <span class="kt">list</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">ic</span> <span class="o">=</span> <span class="n">open_in</span> <span class="n">name</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">try_read</span> <span class="bp">()</span> <span class="o">=</span>
</span><span class='line'>    <span class="k">try</span> <span class="nc">Some</span> <span class="o">(</span><span class="n">input_line</span> <span class="n">ic</span><span class="o">)</span> <span class="k">with</span> <span class="nc">End_of_file</span> <span class="o">-&gt;</span> <span class="nc">None</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="k">rec</span> <span class="n">loop</span> <span class="n">acc</span> <span class="o">=</span> <span class="k">match</span> <span class="n">try_read</span> <span class="bp">()</span> <span class="k">with</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">Some</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">loop</span> <span class="o">(</span><span class="n">s</span> <span class="o">::</span> <span class="n">acc</span><span class="o">)</span>
</span><span class='line'>    <span class="o">|</span> <span class="nc">None</span> <span class="o">-&gt;</span> <span class="n">close_in</span> <span class="n">ic</span><span class="o">;</span> <span class="nn">List</span><span class="p">.</span><span class="n">rev</span> <span class="n">acc</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">loop</span> <span class="bp">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span> <span class="n">labelPixels</span> <span class="o">=</span> <span class="o">{</span> <span class="n">label</span><span class="o">:</span> <span class="kt">int</span><span class="o">;</span> <span class="n">pixels</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">list</span> <span class="o">}</span>
</span><span class='line'><span class="k">let</span> <span class="n">slurp_file</span> <span class="n">file</span> <span class="o">=</span>
</span><span class='line'>   <span class="nn">List</span><span class="p">.</span><span class="n">tl</span> <span class="o">(</span><span class="n">read_lines</span> <span class="n">file</span><span class="o">)</span>
</span><span class='line'>   <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">line</span> <span class="o">-&gt;</span> <span class="nn">Str</span><span class="p">.</span><span class="n">split</span> <span class="o">(</span><span class="nn">Str</span><span class="p">.</span><span class="n">regexp</span> <span class="s2">&quot;,&quot;</span><span class="o">)</span> <span class="n">line</span> <span class="o">)</span>
</span><span class='line'>   <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">numline</span> <span class="o">-&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">x</span><span class="o">:</span><span class="kt">string</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">int_of_string</span> <span class="n">x</span><span class="o">)</span> <span class="n">numline</span><span class="o">)</span>
</span><span class='line'>   <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">line</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="n">label</span><span class="o">=</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">hd</span> <span class="n">line</span><span class="o">);</span> <span class="n">pixels</span><span class="o">=(</span><span class="nn">List</span><span class="p">.</span><span class="n">tl</span> <span class="n">line</span><span class="o">)</span> <span class="o">})</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">trainingset</span> <span class="o">=</span> <span class="n">slurp_file</span><span class="o">(</span><span class="s2">&quot;./trainingsample.csv&quot;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* </span>
</span><span class='line'><span class="c">// COMPUTING DISTANCES</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// We need to compute the distance between images</span>
</span><span class='line'><span class="c">// Math reminder: the euclidean distance is</span>
</span><span class='line'><span class="c">// distance [ x1; y1; z1 ] [ x2; y2; z2 ] = </span>
</span><span class='line'><span class="c">// sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2) + (z1-z2)*(z1-z2))</span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">list_sum</span> <span class="n">lst</span> <span class="o">=</span> <span class="nn">List</span><span class="p">.</span><span class="n">fold_left</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="n">acc</span> <span class="o">-&gt;</span> <span class="n">x</span><span class="o">+.</span><span class="n">acc</span><span class="o">)</span> <span class="mi">0</span><span class="o">.</span><span class="mi">0</span> <span class="n">lst</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">distance</span> <span class="o">(</span><span class="n">p1</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">list</span><span class="o">)</span> <span class="o">(</span><span class="n">p2</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">sqrt</span> <span class="o">(</span><span class="n">list_sum</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">map2</span> <span class="o">(</span> <span class="k">fun</span> <span class="n">a</span> <span class="n">b</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">float_of_int</span><span class="o">(</span><span class="n">a</span><span class="o">-</span><span class="n">b</span><span class="o">)**</span><span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">))</span> <span class="n">p1</span> <span class="n">p2</span><span class="o">)</span> <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">(* </span>
</span><span class='line'><span class="c">// WRITING THE CLASSIFIER FUNCTION</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// We are now ready to write a classifier function!</span>
</span><span class='line'><span class="c">// The classifier should take a set of pixels</span>
</span><span class='line'><span class="c">// (an array of ints) as an input, search for the</span>
</span><span class='line'><span class="c">// closest example in our sample, and predict</span>
</span><span class='line'><span class="c">// the value of that closest element.</span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">minBy</span> <span class="n">f</span> <span class="n">lst</span>  <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">smallest</span> <span class="o">=</span> <span class="n">ref</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">hd</span> <span class="n">lst</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="nn">List</span><span class="p">.</span><span class="n">iter</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">f</span> <span class="n">x</span><span class="o">)</span> <span class="o">&lt;</span> <span class="o">(</span><span class="n">f</span> <span class="o">!</span><span class="n">smallest</span><span class="o">)</span> <span class="k">then</span> <span class="n">smallest</span> <span class="o">:=</span> <span class="n">x</span>
</span><span class='line'>                          <span class="o">)</span> <span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">tl</span> <span class="n">lst</span><span class="o">)</span> <span class="o">;</span>
</span><span class='line'>  <span class="o">!</span><span class="n">smallest</span> <span class="o">;;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">classify</span> <span class="o">(</span><span class="n">pixels</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="n">fst</span> <span class="o">((</span><span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="o">(</span><span class="n">x</span><span class="o">:</span> <span class="n">labelPixels</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">label</span><span class="o">,</span> <span class="o">(</span><span class="n">distance</span> <span class="n">pixels</span> <span class="n">x</span><span class="o">.</span><span class="n">pixels</span><span class="o">)</span> <span class="o">))</span> <span class="n">trainingset</span><span class="o">)</span>
</span><span class='line'>       <span class="o">|&gt;</span> <span class="n">minBy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span>  <span class="o">-&gt;</span> <span class="n">snd</span> <span class="n">x</span><span class="o">)</span>  <span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">(*</span>
</span><span class='line'><span class="c">// EVALUATING THE MODEL AGAINST VALIDATION DATA</span>
</span><span class='line'><span class="c"> </span>
</span><span class='line'><span class="c">// Now that we have a classifier, we need to check</span>
</span><span class='line'><span class="c">// how good it is. </span>
</span><span class='line'><span class="c">// This is where the 2nd file, validationsample.csv,</span>
</span><span class='line'><span class="c">// comes in handy. </span>
</span><span class='line'><span class="c">// For each Example in the 2nd file,</span>
</span><span class='line'><span class="c">// we know what the true Label is, so we can compare</span>
</span><span class='line'><span class="c">// that value with what the classifier says.</span>
</span><span class='line'><span class="c">// You could now check for each 500 example in that file</span>
</span><span class='line'><span class="c">// whether your classifier returns the correct answer,</span>
</span><span class='line'><span class="c">// and compute the % correctly predicted.</span>
</span><span class='line'><span class="c">*)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">validationsample</span> <span class="o">=</span> <span class="n">slurp_file</span><span class="o">(</span><span class="s2">&quot;./validationsample.csv&quot;</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="n">num_correct</span> <span class="o">=</span> <span class="o">(</span><span class="n">validationsample</span> <span class="o">|&gt;</span> <span class="nn">List</span><span class="p">.</span><span class="n">map</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">classify</span> <span class="n">p</span><span class="o">.</span><span class="n">pixels</span> <span class="o">)</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">label</span> <span class="k">then</span> <span class="mi">1</span><span class="o">.</span> <span class="k">else</span> <span class="mi">0</span><span class="o">.)</span> <span class="o">|&gt;</span> <span class="n">list_sum</span><span class="o">)</span>
</span><span class='line'><span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;Percentage correct:%f</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">(((</span><span class="n">num_correct</span><span class="o">)/.</span> <span class="o">(</span><span class="n">float_of_int</span><span class="o">(</span><span class="nn">List</span><span class="p">.</span><span class="n">length</span> <span class="n">validationsample</span><span class="o">)))*.</span><span class="mi">100</span><span class="o">.</span><span class="mi">0</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is very similar. The OCaml version is a bit longer because I needed to implement some functions that are built into the F# library, specifically, <em>minBy</em> (<em>Array.minBy</em> is built in to thd F# standard lib), <em>list_sum</em> (<em>Array.sum</em> is the F# builtin function) and <em>read_lines</em> (<em>File.ReadAllLines</em> is the F# builtin). One difference that could possibly effect performance: The F# version reads the data into <em>Array</em>s whereas the OCaml version reads the data into <em>List</em>s. The OCaml version was just easier to read into a <em>List</em> and OCaml&rsquo;s <em>List</em> module has a <em>map2</em> function whereas OCaml&rsquo;s <em>Array</em> module does not (F# apparently has a <em>map2</em> for both <em>Array</em> and <em>List</em>).</p>

<p>(EDIT: But as it turns out, using a List here instead of an Array is probably responsible for about &frac12; of the performance difference between the F# and the OCaml version. See <a href="(http://philtomson.github.io/blog/2014/05/30/stop-the-presses-ocaml-wins/">the update</a> )</p>

<p>I was surprised how much less performant the OCaml version was:</p>

<pre><code>real    0m47.311s
user    0m46.881s
sys     0m0.135s
</code></pre>

<p>The F# implementation was slightly more than twice as fast o_O.</p>

<p>Next, I recalled from the dojo that it&rsquo;s very easy to parallelize the maps in F#; instead of <em>Array.map</em> you use <em>Array.parallel.map</em>. So after a couple of edits to add parallel maps, I rebuilt and ran with the following time:</p>

<pre><code>real    0m16.400s
user    0m47.135s
sys     0m0.240s
</code></pre>

<p>So after that very simple change the F# version was very nearly 3X faster than the OCaml version. And in <em>top</em> I could see that the CPU usage was up to 360% as it ran.</p>

<p>Ah, but what about OCaml&rsquo;s <a href="https://github.com/rdicosmo/parmap">Parmap</a>?
I modified my OCaml version to use Parmap&hellip; but it took a lot longer to get it working than parallelizing the F# version. Probably about 30 minutes by the time I got it figured out (including figuring out how to compile it).</p>

<p>Here&rsquo;s the OCaml version of the <em>classify</em> function and <em>num_correct</em> that uses Parmap:</p>

<figure class='code'><figcaption><span>[ ] [title: classifyDigitsPar.ml] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">classify</span> <span class="o">(</span><span class="n">pixels</span><span class="o">:</span> <span class="kt">int</span> <span class="kt">list</span><span class="o">)</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">label_dist</span> <span class="o">=</span> <span class="nn">Parmap</span><span class="p">.</span><span class="n">parmap</span> <span class="o">~</span><span class="n">chunksize</span><span class="o">:</span><span class="mi">50</span> <span class="o">~</span><span class="n">ncores</span><span class="o">:</span><span class="mi">4</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">label</span><span class="o">,</span> <span class="o">(</span><span class="n">distance</span> <span class="n">pixels</span> <span class="n">x</span><span class="o">.</span><span class="n">pixels</span><span class="o">)</span> <span class="o">))</span> <span class="o">(</span><span class="nn">Parmap</span><span class="p">.</span><span class="nc">L</span> <span class="n">trainingset</span><span class="o">)</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">min</span> <span class="o">=</span> <span class="n">minBy</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="n">y</span> <span class="o">-&gt;</span> <span class="n">compare</span> <span class="o">(</span><span class="n">snd</span> <span class="n">x</span><span class="o">)</span> <span class="o">(</span><span class="n">snd</span> <span class="n">y</span><span class="o">))</span> <span class="n">label_dist</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">fst</span> <span class="n">min</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">num_correct</span> <span class="o">=</span>
</span><span class='line'>  <span class="o">(</span><span class="nn">Parmap</span><span class="p">.</span><span class="nc">L</span> <span class="n">validationsample</span><span class="o">)</span> <span class="o">|&gt;</span> <span class="nn">Parmap</span><span class="p">.</span><span class="n">parmap</span> <span class="o">~</span><span class="n">ncores</span><span class="o">:</span><span class="mi">4</span> <span class="o">(</span><span class="k">fun</span> <span class="n">p</span> <span class="o">-&gt;</span> <span class="k">if</span> <span class="o">(</span><span class="n">classify</span> <span class="n">p</span><span class="o">.</span><span class="n">pixels</span> <span class="o">)</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="n">label</span> <span class="k">then</span> <span class="mi">1</span><span class="o">.</span> <span class="k">else</span> <span class="mi">0</span><span class="o">.)</span> <span class="o">|&gt;</span> <span class="n">list_sum</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that you have to tell it how many cores you have.</p>

<p>After I got it to compile I ran it with much anticipation&hellip;</p>

<pre><code>real    1m43.140s
user    5m38.809s
sys     0m42.811s
</code></pre>

<p>&hellip; over twice as slow as the original OCaml implementation.
I noticed in <em>top</em> that this version launched 4 different <em>classifyDigitPar</em> processes so I&rsquo;m guessing that it uses sockets to communicate between the processes. For this particular problem that doesn&rsquo;t appear to be effective. Perhaps it would be for a longer running example, but I&rsquo;m not sure. F# certainly wins in the parallelization department.</p>

<h3>Observations</h3>

<p>Other than performance (where F# on Mono seems to win handily) I noticed the following:</p>

<ol>
<li>The Array slicing syntax in F# is quite nice.</li>
<li>F#&rsquo;s standard library is just more comprehensive. I could have probably used Janestreet&rsquo;s <em>Core</em> library for OCaml which is quite comprehensive, but I wanted to stick with the standard library for both.</li>
<li>Monodevelop has a <em>vi</em> editing mode. It&rsquo;s kind of ok. But it&rsquo;s missing a lot of keybindings that you&rsquo;d have in native vi.</li>
<li>I have no idea what F#&rsquo;s (or Monodevelop&rsquo;s) equavilent to <em>opam</em> is. I&rsquo;m guessing OCaml wins in the package management department.</li>
<li>F#&rsquo;s polymorphic math operators were nice (no need for <em>+.</em>, etc.).</li>
</ol>


<p>You can find the code above in <a href="https://github.com/philtomson/ClassifyDigits">my github</a></p>

<h3>Next Time</h3>

<p>I want to implement the algorithm in <a href="http://julialang.org/">Julia</a>. I&rsquo;m going to guess that Julia&rsquo;s vectorization support means that it will beat both OCaml and F#.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Drawing Happy Little Trees: Tree Meditation #2]]></title>
    <link href="http://philtomson.github.io/blog/2014/05/14/drawing-happy-little-trees-tree-meditation-number-2/"/>
    <updated>2014-05-14T11:55:00-07:00</updated>
    <id>http://philtomson.github.io/blog/2014/05/14/drawing-happy-little-trees-tree-meditation-number-2</id>
    <content type="html"><![CDATA[<p><img src="http://upload.wikimedia.org/wikipedia/commons/e/eb/Ash_Tree_-_geograph.org.uk_-_590710.jpg" alt="Alt Ash Tree" /></p>

<p><em>In the <a href="http://philtomson.github.io/blog/2014/04/29/coding-pretty-little-trees-tree-meditation-number-1/">previous Tree Meditation</a> we pondered some preliminary ideas about treeness. Now let&rsquo;s think about how to draw our trees. Before we start, make sure you paste this tree type code from the last installment into the <a href="http://try.ocamlpro.com/">Try OCaml REPL</a>:</em></p>

<figure class='code'><figcaption><span>[ ] [title: our tree type definition] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">type</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">=</span> <span class="nc">Empty</span> <span class="o">|</span> <span class="nc">Leaf</span> <span class="k">of</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">|</span> <span class="nc">Node</span> <span class="k">of</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">*</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">*</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span>
</span></code></pre></td></tr></table></div></figure>


<p>Last time we coded our little tree using the constructors <em>Empty</em>, <em>Leaf</em>, and <em>Node</em> defined in our tree type:</p>

<figure class='code'><figcaption><span>[ ] [title: Our first happy little tree ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="nc">Node</span><span class="o">(</span><span class="nc">Leaf</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">Leaf</span> <span class="mi">3</span><span class="o">)</span> <span class="o">;;</span>
</span><span class='line'><span class="o">-</span> <span class="o">:</span> <span class="kt">int</span> <span class="n">tree</span> <span class="o">=</span> <span class="nc">Node</span> <span class="o">(</span><span class="nc">Leaf</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">Leaf</span> <span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>NOTE: if you&rsquo;re using your own local OCaml REPL (ocaml or utop) make sure you terminate all of the entries here with double semicolon: ;;  The Try Ocaml REPL seems to do this for you automatically.</em></p>

<p>To create a picture of the tree we&rsquo;ll use <a href="http://www.graphviz.org/">Graphviz</a> which is a suite of commandline tools that can be used to visualize graphs. Since our tree is a <a href="http://en.wikipedia.org/wiki/Tree_(graph_theory)">graph</a>, we can use Graphviz to visualize it. Specifically, we&rsquo;ll use a program called <em>dot</em> to create a visual representation of the graph.</p>

<p>This is what our tree should look like in the <em>dot</em> language:</p>

<figure class='code'><figcaption><span>[ ] [title: tree.dot ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'>  <span class="n">graph</span> <span class="n">tree</span> <span class="o">{</span>
</span><span class='line'>    <span class="o">{</span><span class="nc">N1</span><span class="o">[</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">]}--</span> <span class="o">{</span><span class="nc">L2</span><span class="o">[</span><span class="n">shape</span><span class="o">=</span><span class="n">box</span><span class="o">,</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;2&quot;</span><span class="o">]}</span>
</span><span class='line'>    <span class="o">{</span><span class="nc">N1</span><span class="o">[</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;1&quot;</span><span class="o">]}--</span> <span class="o">{</span><span class="nc">L3</span><span class="o">[</span><span class="n">shape</span><span class="o">=</span><span class="n">box</span><span class="o">,</span><span class="n">label</span><span class="o">=</span><span class="s2">&quot;3&quot;</span><span class="o">]}</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We have a graph called <em>tree</em>. Inside of the <em>tree</em> block we define the connections between the nodes (or in our case between <em>Node</em>s and/or <em>Leaf</em>s, but no <em>Empty</em>s, of course, as they&rsquo;re invisible).</p>

<p>Each node in the graph needs a unique identifier which is what <em>N1,L2</em> and <em>L3</em> are above. We also give each node a label which is what is shown
in the graphical output of the tree. That&rsquo;s the <em>[label=&ldquo;some label&rdquo;]</em> part of the node specifications above.</p>

<p>The &lsquo;&ndash;&rsquo; means that there is a connection between two nodes.</p>

<p>It&rsquo;s a fairly simple representation of our tree. We can generate the picture of the tree by running:</p>

<pre><code>$ dot -Tsvg -o happy_tree.svg tree.dot
</code></pre>

<p>This will generate the file happy_tree.svg which we see here:</p>

<p><img src="http://philtomson.github.io/images/happy_tree.svg" alt="Alt Our Happy Tree" /></p>

<p>That&rsquo;s nice and all, but what if our tree is much larger than this one and has many nodes and leaves? We&rsquo;d like to be able to generate the <em>tree.dot</em> file automatically from our coded representation of our tree. To do that we need to talk a bit about tree <em>traversal</em> (visiting each node or leaf of our tree structure).</p>

<p>Let&rsquo;s create a somewhat bigger tree to make our traversal discussion clearer:</p>

<figure class='code'><figcaption><span>[ ] [title: bigger tree ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">Node</span> <span class="o">(</span>
</span><span class='line'>              <span class="nc">Node</span> <span class="o">(</span>
</span><span class='line'>                    <span class="nc">Leaf</span> <span class="s2">&quot;0&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s2">&quot;1&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="nc">Leaf</span> <span class="s2">&quot;2&quot;</span><span class="o">),</span>
</span><span class='line'>              <span class="s2">&quot;3&quot;</span><span class="o">,</span>
</span><span class='line'>              <span class="nc">Node</span> <span class="o">(</span>
</span><span class='line'>                    <span class="nc">Leaf</span> <span class="s2">&quot;4&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s2">&quot;5&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="nc">Leaf</span> <span class="s2">&quot;6&quot;</span>
</span><span class='line'>              <span class="o">)</span>
</span><span class='line'>         <span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Which looks like:</p>

<p><img src="http://philtomson.github.io/images/bigger_tree.svg" alt="Alt Our Happy Tree" /></p>

<p>So why the odd order of the numbers in the tree above? One thing that&rsquo;s not clear in our type definition from the previous article is that, by convention, an important property of binary trees is that child trees to the left of the current node should contain values that are less than the value held in the current node and child trees to the right of the current node should contain values that are greater than the value of the current node.</p>

<p>(As an aside, if we wanted to encode that requirement in our type definition we would need to be using a language which has <a href="http://en.wikipedia.org/wiki/Dependent_type"><em>dependent types</em></a> )</p>

<p>Our chosen ordering above will become clearer as we talk about different types of traversal.</p>

<h2>Tree Traversal</h2>

<p>In order to generate a dot file that represents our tree we&rsquo;ll need to <em>traverse</em> the nodes of our tree meaning we need to somehow visit all of the nodes of our tree structure.</p>

<p>There are two categories of tree traversal: <em>Depth First</em> or <em>Breadth First (aka Level Order Traversal)</em>.</p>

<p>In all cases we start the tree traversal from the root of the tree. In our tree above, the root of the tree is the node that contains the value <em>3</em>. <em>(For whatever reason, in Computer Science trees are generally upside-down with the root at the top and the leaves at the bottom.)</em></p>

<h3>Depth First Traversal</h3>

<p>There are three ways to do a depth-first traversal of a tree:</p>

<h4>1. Pre-order Traversal</h4>

<p>The steps of a Pre-order traversal:</p>

<ol>
<li>Visit the current node and do something with the value found there.</li>
<li>Traverse the left subtree.</li>
<li>Traverse the right subtree.</li>
</ol>


<p>An OCaml function to do a preorder traversal is defined as follows:</p>

<figure class='code'><figcaption><span>[ ] [title: preorder tree traversal function] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">preorder_traverse</span> <span class="n">t</span> <span class="o">=</span> <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span>           <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Leaf</span>  <span class="k">value</span>     <span class="o">-&gt;</span> <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;%s &quot;</span> <span class="k">value</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span> <span class="o">(</span><span class="n">l</span><span class="o">,</span><span class="k">value</span><span class="o">,</span><span class="n">r</span><span class="o">)-&gt;</span> <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;%s &quot;</span> <span class="k">value</span><span class="o">;</span>
</span><span class='line'>                       <span class="n">preorder_traverse</span> <span class="n">l</span><span class="o">;</span>
</span><span class='line'>                       <span class="n">preorder_traverse</span> <span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>


<p>The recursive <em>preorder_traverse</em> function (note the <em>rec</em> in the function definition) takes a tree and uses <a href="http://en.wikipedia.org/wiki/Pattern_matching">pattern matching</a> to determine what to do with each variant in the <em>tree</em> type. If <em>t</em> is an <em>Empty</em> we do nothing (empty parens <em>()</em> also known as <em>unit</em> in OCaml) . If It&rsquo;s a <em>Leaf</em> we print it&rsquo;s value. If it&rsquo;s a <em>Node</em> we print it&rsquo;s value and then call <em>preorder_traverse</em> on the left tree of the node and then call <em>preorder_traverse</em> on the right tree of the node.</p>

<p>Running this on our tree above we get (You&rsquo;ve been typing the code into the <a href="http://try.ocamlpro.com/">online OCaml REPL</a> right?) :</p>

<pre><code># preorder_traverse t ;;
3 1 0 2 5 4 6 - : unit = ()
</code></pre>

<h4>2. In-order Traversal</h4>

<p>The steps of an In-order traversal:</p>

<ol>
<li>Traverse the left subtree.</li>
<li>Visit current node and do something with value found there.</li>
<li>Traverse the right subtree.</li>
</ol>


<p>Here&rsquo;s the OCaml function for an inorder traversal:</p>

<figure class='code'><figcaption><span>[ ] [title: inorder tree traversal function] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">inorder_traverse</span> <span class="n">t</span> <span class="o">=</span> <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Empty</span>            <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Leaf</span> <span class="k">value</span>       <span class="o">-&gt;</span> <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;%s &quot;</span> <span class="k">value</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Node</span> <span class="o">(</span><span class="n">l</span><span class="o">,</span><span class="k">value</span><span class="o">,</span><span class="n">r</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">inorder_traverse</span> <span class="n">l</span> <span class="o">;</span>
</span><span class='line'>                         <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span>  <span class="s2">&quot;%s &quot;</span> <span class="k">value</span><span class="o">;</span>
</span><span class='line'>                         <span class="n">inorder_traverse</span> <span class="n">r</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running this on our tree we get:</p>

<pre><code># inorder_traverse t ;;
0 1 2 3 4 5 6 - : unit = ()
</code></pre>

<p>Now you can get an idea of why we arranged the values in our tree as we did.</p>

<h4>3. Post-order Traversal</h4>

<p>Now you probably get the idea. For postorder we&rsquo;re going to traverse the left subtree then traverse the right subtree and finally visit the current node and do something with it&rsquo;s value:</p>

<figure class='code'><figcaption><span>[ ] [title: inorder tree traversal function] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">postorder_traverse</span> <span class="n">t</span> <span class="o">=</span> <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Empty</span>  <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Leaf</span> <span class="k">value</span> <span class="o">-&gt;</span> <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span> <span class="s2">&quot;%s &quot;</span> <span class="k">value</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Node</span> <span class="o">(</span><span class="n">l</span><span class="o">,</span><span class="k">value</span><span class="o">,</span><span class="n">r</span><span class="o">)</span> <span class="o">-&gt;</span>  <span class="n">postorder_traverse</span> <span class="n">l</span><span class="o">;</span>
</span><span class='line'>                          <span class="n">postorder_traverse</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>                          <span class="nn">Printf</span><span class="p">.</span><span class="n">printf</span>  <span class="s2">&quot;%s &quot;</span> <span class="k">value</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when we run this on our tree we get:</p>

<pre><code># postorder_traverse t ;;
0 2 1 4 6 5 3 - : unit = ()
</code></pre>

<p><em>As an aside, instead of just printing the current value we&rsquo;d probably want to make each of our traversal functions more general. This is functional programming, after all, and one of the great &ldquo;wins&rdquo; of functional programming is being able to pass functions to functions - function composition. We can generalize our traversal functions by passing in a function that will do something with the value:</em></p>

<figure class='code'><figcaption><span>[ ] [title: generalized inorder tree traversal function] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">postorder_traverse</span> <span class="n">f</span> <span class="n">t</span> <span class="o">=</span> <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Empty</span>            <span class="o">-&gt;</span> <span class="bp">()</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Leaf</span> <span class="k">value</span>       <span class="o">-&gt;</span> <span class="n">f</span> <span class="k">value</span>
</span><span class='line'>  <span class="o">|</span>  <span class="nc">Node</span> <span class="o">(</span><span class="n">l</span><span class="o">,</span><span class="k">value</span><span class="o">,</span><span class="n">r</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">postorder_traverse</span> <span class="n">f</span> <span class="n">l</span><span class="o">;</span>
</span><span class='line'>                         <span class="n">postorder_traverse</span> <span class="n">f</span> <span class="n">r</span><span class="o">;</span>
</span><span class='line'>                         <span class="n">f</span> <span class="k">value</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Then we could use this version of postorder_traverse to print the values in our tree:</em></p>

<pre><code># postorder_traverse (fun n -&gt; Printf.printf "%s " n) t;;
0 2 1 4 6 5 3 - : unit = ()
</code></pre>

<p>Notice that none of these depth first traversals of the tree will work for us in creating the <em>dot</em> file for graphviz. We need some other way to traverse the tree&hellip;</p>

<p>We need something that gives us (not actual <em>dot</em> code, but you get the idea):
    3 -> 1
    3 -> 5
    1 -> 0
    1 -> 2
    5 -> 4
    5 -> 6</p>

<p>Which brings us to&hellip;</p>

<h3>Breadth First (or Level Order) Traversal</h3>

<p>A Level Order traversal means we&rsquo;re traversing each level of the tree. A Level order traversal of our tree above would look like(line breaks added to emphasize the levels of the tree):</p>

<pre><code>3 
1 5 
0 2 4 6
</code></pre>

<p>This still isn&rsquo;t quite what we need yet, but it seems we&rsquo;re getting closer.</p>

<p>Before we go on, let&rsquo;s define a couple of helper functions that we&rsquo;ll need to construct our <em>dot</em> file.</p>

<p>First off, we&rsquo;ll need to construct a string that gets written to the <em>dot</em> file. It would be good to have a function that converts each of the 3 variants that can make up a <em>tree</em> type to a string in <em>dot</em> format that represents the node in the graph:</p>

<figure class='code'><figcaption><span>[ ] [title: to_dot_node] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">to_dot_node</span> <span class="o">(</span><span class="n">t</span><span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span><span class="o">)</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span> <span class="o">-&gt;</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(_,</span><span class="n">x</span><span class="o">,_)</span> <span class="o">-&gt;</span> <span class="s2">&quot;{N&quot;</span><span class="o">^</span><span class="n">x</span><span class="o">^</span><span class="s2">&quot;[label=</span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="o">^</span><span class="n">x</span><span class="o">^</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">]}&quot;</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Leaf</span> <span class="n">x</span> <span class="o">-&gt;</span>      <span class="s2">&quot;{L&quot;</span><span class="o">^</span><span class="n">x</span><span class="o">^</span><span class="s2">&quot;[shape=box,label=</span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="o">^</span><span class="n">x</span><span class="o">^</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">]}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that in this function definition we explicitly specified that the <em>t</em> argument passed to this function should be of type <em>&lsquo;a tree</em> and the output is of type <em>string</em> - this is completely optional as the compiler can figure out the types of the arguments using <em>type inference</em>, but it can make the code easier to read. <em>(Note: ^ is the string concatenation operator in OCaml)</em></p>

<p>If you pasted that function in the REPL you&rsquo;ll see:</p>

<pre><code>val to_dot_node : string tree -&gt; string = &lt;fun&gt; 
</code></pre>

<p>Which means that this is a function that takes a <em>string tree</em> and returns a <em>string</em>.</p>

<p>We can try running this function on our tree:</p>

<pre><code># to_dot_node t ;;
- : string = "{N3[label=\"3\"]}"
</code></pre>

<p>Which is the label of the root of our tree (3).</p>

<p>Next, we&rsquo;ll define a function that given two inputs of type <em>&lsquo;a tree</em> will return an <em>edge</em> (a line between two nodes in the tree) in <em>dot</em> format:</p>

<figure class='code'><figcaption><span>[ ] [title: edge] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">edge</span> <span class="o">(</span><span class="n">n1</span><span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">)</span> <span class="o">(</span><span class="n">n2</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">)</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="o">(</span><span class="n">to_dot_node</span> <span class="n">n1</span><span class="o">)^</span><span class="s2">&quot;--&quot;</span><span class="o">^(</span><span class="n">to_dot_node</span> <span class="n">n2</span><span class="o">)^</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can go on to define our <em>tree_to_dot</em> function:</p>

<figure class='code'><figcaption><span>[ ] [title: tree_to_dot] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">tree_to_dot</span>  <span class="n">acc</span> <span class="n">t</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span> <span class="o">-&gt;</span> <span class="n">acc</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">leaf</span> <span class="o">-&gt;</span>   <span class="n">acc</span> <span class="o">^</span> <span class="o">(</span><span class="n">to_dot_node</span> <span class="n">leaf</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span><span class="nc">Node</span> <span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">n</span><span class="o">)</span> <span class="o">,</span> <span class="o">_,</span>  <span class="o">(</span><span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">leaf</span><span class="o">))</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">leaf</span><span class="o">,</span> <span class="o">_,</span> <span class="o">(</span><span class="nc">Node</span> <span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">n</span><span class="o">))</span>     <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">n</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">leaf</span><span class="o">)</span> <span class="o">^(</span><span class="n">tree_to_dot</span> <span class="n">acc</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span> <span class="nc">Node</span><span class="o">(_,_,_)</span>  <span class="k">as</span> <span class="n">n</span><span class="o">)</span> <span class="o">,</span> <span class="o">_,</span>  <span class="nc">Empty</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="nc">Empty</span><span class="o">,</span> <span class="o">_,</span> <span class="o">(</span><span class="nc">Node</span><span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">n</span><span class="o">))</span>    <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">n</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">tree_to_dot</span> <span class="n">acc</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span> <span class="nc">Leaf</span> <span class="o">_</span>  <span class="k">as</span> <span class="n">leaf</span><span class="o">),</span> <span class="o">_,</span> <span class="nc">Empty</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="nc">Empty</span><span class="o">,</span> <span class="o">_,(</span><span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">leaf</span><span class="o">))</span>   <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">leaf</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span><span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">left</span><span class="o">),</span> <span class="o">_,</span> <span class="o">(</span><span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">right</span><span class="o">))</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">left</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">right</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="nc">Empty</span><span class="o">,</span> <span class="o">_,</span> <span class="nc">Empty</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">acc</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span><span class="nc">Node</span> <span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">nl</span><span class="o">)</span> <span class="o">,</span> <span class="o">_,</span> <span class="o">(</span><span class="nc">Node</span><span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">nr</span><span class="o">))</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">nl</span><span class="o">)^(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">nr</span><span class="o">)^(</span><span class="n">tree_to_dot</span> <span class="n">acc</span> <span class="n">nl</span><span class="o">)^(</span><span class="n">tree_to_dot</span> <span class="n">acc</span> <span class="n">nr</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first argument to <em>tree_to_dot</em> is <em>acc</em> which is specified as being a string. <em>acc</em> is our accumulator: we&rsquo;ll use it to build up our <em>dot</em> file. Notice that the function is specified as being recursive ( the <em>rec</em> specifies that the function can call itself).</p>

<p>Our pattern match covers all of the potential cases we might encounter. The first one matches <em>t</em> with <em>Empty</em> and in that case returns our accumulator <em>acc</em>. The next match is against <em>Leaf _</em> (underscore there meaning that the <em>Leaf</em> could contain any value). If <em>t</em> is a Leaf, then we&rsquo;ll append the <em>Leaf</em>&rsquo;s <em>dot</em> node format to the accumulator.</p>

<p>After this we do several matches where <em>t</em> is a <em>Node</em> variant. In order to create an <em>edge</em> we need to know about the children of the current <em>Node</em>. Pattern Matching allows us to do this, the first pattern match against <em>Node</em> is:</p>

<pre><code>  | Node( (Node (_,_,_) as n) , _,  (Leaf _ as leaf))
  | Node( Leaf _ as leaf, _, (Node (_,_,_) as n))     -&gt;
      (edge t n) ^ (edge t leaf) ^(tree_to_dot acc n)
</code></pre>

<p>We&rsquo;re considering two cases here:</p>

<ol>
<li>The case where the <em>Node</em> contains a <em>Node</em> as the left sub-tree and a <em>Leaf</em> in the right sub-tree.</li>
<li>The case where the <em>Node</em> contains a <em>Leaf</em> as the left sub-tree and a <em>Node</em> in the right sub-tree.</li>
</ol>


<p>If either of these cases match, we then create an edge from the current <em>Node</em> (which is <em>t</em>) to the next <em>Node</em> (which is <em>n</em>) and an edge from the current <em>Node</em> (<em>t</em>) to the <em>Leaf</em> (<em>leaf</em>). And we concatenate that with the recursive call to <em>tree_to_dot acc n</em>, meaning we&rsquo;re passing the child node <em>n</em> on to <em>tree_to_dot</em> for further processing.</p>

<p>Next we match the two cases where there&rsquo;s a single child <em>Node</em> and a single <em>Empty</em> node. If so we create an edge from the current <em>Node</em> (<em>t</em>) to the child <em>Node</em> and concatenat that with the call to <em>tree_to_dot</em> given the child <em>Node</em> <em>n</em>.</p>

<p>After that we match the two cases where one child of the <em>Node</em> is a <em>Leaf</em> and the other is <em>Empty</em>. If these cases match we only return an edge from the current <em>Node</em> <em>t</em> to the child <em>Leaf</em>. No recursive call to <em>tree_to_dot</em> in this case. Since there are no child <em>Node</em>s, there&rsquo;s no reason to.</p>

<p>If both sub-trees of the current <em>Node</em> <em>t</em> are <em>Leaf</em>s then the next pattern matches and we concatenate the two edges from the current <em>Node</em> <em>t</em> to each <em>Leaf</em>.</p>

<p>In the next case we check for both sub-trees of the <em>Node</em> being <em>Empty</em> and if that case matches we just return the accumulator.</p>

<p>Finally, we cover the case where both sub-trees of the current node are <em>Node</em>s. Notice that if this case matches we have two calls to <em>tree_to_dot</em> - one for the left subtree and the other for the right subtree.</p>

<p>Now we just need to do a bit of housekeeping to write out the complete <em>dot</em> file:</p>

<figure class='code'><figcaption><span>[ ] [title: tree_to_dotfile] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">let</span> <span class="n">tree_to_dotfile</span> <span class="n">t</span> <span class="n">file</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">dot_tree</span> <span class="o">=</span> <span class="s2">&quot;graph tree {</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">^(</span><span class="n">tree_to_dot</span> <span class="s2">&quot; &quot;</span> <span class="n">t</span><span class="o">)^</span><span class="s2">&quot;}&quot;</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">open_out</span> <span class="n">file</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">output_string</span> <span class="n">channel</span> <span class="n">dot_tree</span><span class="o">;</span>
</span><span class='line'>  <span class="n">close_out</span> <span class="n">channel</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function won&rsquo;t work in the Try OCaml REPL since it writes to a file. But maybe by now you&rsquo;ve been convinced to install OCaml. If so, here&rsquo;s the whole program so you can compile it:</p>

<figure class='code'><figcaption><span>[ ] [title: tree.ml] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="k">type</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">=</span> <span class="nc">Empty</span> <span class="o">|</span> <span class="nc">Leaf</span> <span class="k">of</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">|</span> <span class="nc">Node</span> <span class="k">of</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">*</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">*</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">to_dot_node</span> <span class="o">(</span><span class="n">t</span><span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span><span class="o">)</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span> <span class="o">-&gt;</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(_,</span><span class="n">x</span><span class="o">,_)</span> <span class="o">-&gt;</span> <span class="s2">&quot;{N&quot;</span><span class="o">^</span><span class="n">x</span><span class="o">^</span><span class="s2">&quot;[label=</span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="o">^</span><span class="n">x</span><span class="o">^</span><span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">]}&quot;</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Leaf</span> <span class="n">x</span> <span class="o">-&gt;</span>      <span class="s2">&quot;{L&quot;</span><span class="o">^</span><span class="n">x</span><span class="o">^</span><span class="s2">&quot;[shape=box,label=</span><span class="se">\&quot;</span><span class="s2">&quot;</span> <span class="o">^</span><span class="n">x</span><span class="o">^</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">]}&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">edge</span> <span class="o">(</span><span class="n">n1</span><span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">)</span> <span class="o">(</span><span class="n">n2</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">)</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">=</span> <span class="o">(</span><span class="n">to_dot_node</span> <span class="n">n1</span><span class="o">)^</span><span class="s2">&quot;--&quot;</span><span class="o">^(</span><span class="n">to_dot_node</span> <span class="n">n2</span><span class="o">)^</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="k">rec</span> <span class="n">tree_to_dot</span> <span class="o">(</span><span class="n">acc</span> <span class="o">:</span> <span class="kt">string</span><span class="o">)</span> <span class="o">(</span><span class="n">t</span> <span class="o">:</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span><span class="o">)</span> <span class="o">:</span> <span class="kt">string</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">match</span> <span class="n">t</span> <span class="k">with</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Empty</span> <span class="o">-&gt;</span> <span class="n">acc</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">leaf</span> <span class="o">-&gt;</span>   <span class="n">acc</span> <span class="o">^</span> <span class="o">(</span><span class="n">to_dot_node</span> <span class="n">leaf</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span><span class="nc">Node</span> <span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">n</span><span class="o">)</span> <span class="o">,</span> <span class="o">_,</span>  <span class="o">(</span><span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">leaf</span><span class="o">))</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">leaf</span><span class="o">,</span> <span class="o">_,</span> <span class="o">(</span><span class="nc">Node</span> <span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">n</span><span class="o">))</span>     <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">n</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">leaf</span><span class="o">)</span> <span class="o">^(</span><span class="n">tree_to_dot</span> <span class="n">acc</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span> <span class="nc">Node</span><span class="o">(_,_,_)</span>  <span class="k">as</span> <span class="n">n</span><span class="o">)</span> <span class="o">,</span> <span class="o">_,</span>  <span class="nc">Empty</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="nc">Empty</span><span class="o">,</span> <span class="o">_,</span> <span class="o">(</span><span class="nc">Node</span><span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">n</span><span class="o">))</span>    <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">n</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">tree_to_dot</span> <span class="n">acc</span> <span class="n">n</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span> <span class="nc">Leaf</span> <span class="o">_</span>  <span class="k">as</span> <span class="n">leaf</span><span class="o">),</span> <span class="o">_,</span> <span class="nc">Empty</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="nc">Empty</span><span class="o">,</span> <span class="o">_,(</span><span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">leaf</span><span class="o">))</span>   <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">leaf</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span><span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">left</span><span class="o">),</span> <span class="o">_,</span> <span class="o">(</span><span class="nc">Leaf</span> <span class="o">_</span> <span class="k">as</span> <span class="n">right</span><span class="o">))</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">left</span><span class="o">)</span> <span class="o">^</span> <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">right</span><span class="o">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="nc">Empty</span><span class="o">,</span> <span class="o">_,</span> <span class="nc">Empty</span><span class="o">)</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="n">acc</span>
</span><span class='line'>  <span class="o">|</span> <span class="nc">Node</span><span class="o">(</span> <span class="o">(</span><span class="nc">Node</span> <span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">nl</span><span class="o">)</span> <span class="o">,</span> <span class="o">_,</span> <span class="o">(</span><span class="nc">Node</span><span class="o">(_,_,_)</span> <span class="k">as</span> <span class="n">nr</span><span class="o">))</span> <span class="o">-&gt;</span>
</span><span class='line'>      <span class="o">(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">nl</span><span class="o">)^(</span><span class="n">edge</span> <span class="n">t</span> <span class="n">nr</span><span class="o">)^(</span><span class="n">tree_to_dot</span> <span class="n">acc</span> <span class="n">nl</span><span class="o">)^(</span><span class="n">tree_to_dot</span> <span class="n">acc</span> <span class="n">nr</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">tree_to_dotfile</span> <span class="n">t</span> <span class="n">file</span> <span class="o">=</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">dot_tree</span> <span class="o">=</span> <span class="s2">&quot;graph tree {</span><span class="se">\n</span><span class="s2">&quot;</span><span class="o">^(</span><span class="n">tree_to_dot</span> <span class="s2">&quot; &quot;</span> <span class="n">t</span><span class="o">)^</span><span class="s2">&quot;}&quot;</span> <span class="k">in</span>
</span><span class='line'>  <span class="k">let</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">open_out</span> <span class="n">file</span> <span class="k">in</span>
</span><span class='line'>  <span class="n">output_string</span> <span class="n">channel</span> <span class="n">dot_tree</span><span class="o">;</span>
</span><span class='line'>  <span class="n">close_out</span> <span class="n">channel</span><span class="o">;;</span>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="n">t</span> <span class="o">=</span> <span class="nc">Node</span> <span class="o">(</span>
</span><span class='line'>              <span class="nc">Node</span> <span class="o">(</span>
</span><span class='line'>                    <span class="nc">Leaf</span> <span class="s2">&quot;0&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s2">&quot;1&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="nc">Leaf</span> <span class="s2">&quot;2&quot;</span><span class="o">),</span>
</span><span class='line'>              <span class="s2">&quot;3&quot;</span><span class="o">,</span>
</span><span class='line'>              <span class="nc">Node</span> <span class="o">(</span>
</span><span class='line'>                    <span class="nc">Leaf</span> <span class="s2">&quot;4&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="s2">&quot;5&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="nc">Leaf</span> <span class="s2">&quot;6&quot;</span>
</span><span class='line'>              <span class="o">)</span>
</span><span class='line'>         <span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">let</span> <span class="o">_</span> <span class="o">=</span> <span class="n">tree_to_dotfile</span> <span class="n">t</span> <span class="s2">&quot;tree.dot&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can compile it with the following command:</p>

<pre><code>$ ocamlopt -o tree tree.ml
</code></pre>

<h3>That&rsquo;s all there is to it</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding Happy Little Trees: Tree Meditation #1]]></title>
    <link href="http://philtomson.github.io/blog/2014/04/29/coding-pretty-little-trees-tree-meditation-number-1/"/>
    <updated>2014-04-29T12:33:00-07:00</updated>
    <id>http://philtomson.github.io/blog/2014/04/29/coding-pretty-little-trees-tree-meditation-number-1</id>
    <content type="html"><![CDATA[<p><img src="http://t3.gstatic.com/images?q=tbn:ANd9GcSIjEBactvxvvUkh6DVgHT2Dan9e57x3nbGbq5RdzjwXkcV4V1r" title="Bob Ross, master of happy trees" alt="Alt Bob Ross" /></p>

<p><em>It all started a few months ago when I created a quad-tree structure and
then wanted to be able to visualize those trees with GraphViz. Thus
  this tree meditation was born. And who was the master of happy little trees? <a href="http://en.wikipedia.org/wiki/Bob_Ross">Bob Ross</a> of course. So if you like, read the following in Bob&rsquo;s very relaxing voice&hellip;. try not to go to sleep.</em></p>

<p>Before we can code our happy little trees we need to define what a tree is:</p>

<figure class='code'><figcaption><span>[ ] [title: binary tree type in OCaml] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">#</span> <span class="k">type</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">=</span> <span class="nc">Empty</span> <span class="o">|</span> <span class="nc">Leaf</span> <span class="k">of</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">|</span> <span class="nc">Node</span> <span class="k">of</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">*</span> <span class="k">&#39;</span><span class="n">a</span> <span class="o">*</span> <span class="k">&#39;</span><span class="n">a</span> <span class="n">tree</span> <span class="o">;;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can go ahead and type that yourself into the <a href="http://try.ocamlpro.com/">online OCaml REPL (Read Evaluate Print Loop)</a>. Go ahead, give it a try.</p>

<p>The type definition here is in <a href="http://ocaml.org/">OCaml</a>. The ML family of languages (SML, OCaml and Haskell, for example) excel at creating pretty trees because they have <a href="http://en.wikipedia.org/wiki/Algebraic_data_type">algebraic data types</a>. What&rsquo;s the <em>&lsquo;a tree</em> mean? The <em>'a</em> is a type variable and means that we&rsquo;re creating trees which contain data of type <em>'a</em>. Since <em>'a</em> isn&rsquo;t specified it means that any type of data could live in the tree; our tree is <em>polymorphic</em>.</p>

<p>Since this is a SUM type (also called an OR type, notice the &lsquo;|&rsquo;s in the definition above) we can surmise that a tree can either be <em>Empty</em> or have a <em>Leaf</em> or a <em>Node</em>. <em>Empty</em>, <em>Leaf</em> and <em>Node</em> are used to build our tree, they are our tree <em>constructors</em>.</p>

<p><em>Empty</em>, what&rsquo;s that mean? Think of it as the tree of nothingness. Very Zen. Hopefully it will make more sense when we start creating and traversing trees.</p>

<p><em>Leaf of &lsquo;a</em> means that a leaf can contain data of type <em>'a</em> and as was explained above, that means that the leaf can contain data of any type. How do we create a <em>Leaf of 'a</em> in our code?</p>

<figure class='code'><figcaption><span>[ ] [title: How to make a leaf] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">#</span> <span class="nc">Leaf</span> <span class="s2">&quot;I&#39;m a Leaf&quot;</span> <span class="o">;;</span>
</span><span class='line'><span class="o">-</span> <span class="o">:</span> <span class="kt">string</span> <span class="n">tree</span> <span class="o">=</span> <span class="nc">Leaf</span> <span class="s2">&quot;I&#39;m a Leaf&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above was typed into the OCaml REPL. The <em>#</em> is the REPL prompt, we only typed in the actual <em>Leaf &ldquo;I&rsquo;m a Leaf&rdquo;</em> part. The second line shows the result. Notce that the type is <em>string tree</em> because we passed a string to the <em>Leaf</em> constructor. So our leaf is itself a tree. Ok, maybe that seems a little stange, but hold up a leaf by the stem and it can certainly look like a little tree on it&rsquo;s own, don&rsquo;t you think? Fractals, think fractals.</p>

<p>Now we&rsquo;re left with that <em>Node of &lsquo;a tree * 'a * 'a tree</em> part of the tree type definition. Here we&rsquo;ve reached the essence of <em>treeness</em>. A <em>Node</em> of a tree has three parts: A <em>'a tree</em> on the left, the actual <em>'a</em> data contained by this <em>Node</em> and another <em>'a tree</em> on the right. This part of the definition of <em>tree</em> is recursive because a <em>Node</em> is the piece of a tree which can contain other trees - in our case we have defined a <em>binary</em> tree type since each node has only two branches: a left tree and a right tree. What&rsquo;s with the asterisks? Technically they indicate that this part of the type is a <em>Cartesian product</em> (algebraic datatypes remember). We can think of this particular one as a <em>triple</em> - a collection of 3 things.</p>

<p>So without further ado, let&rsquo;s code a happy little tree:</p>

<figure class='code'><figcaption><span>[ ] [title: Our first happy little tree ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">#</span> <span class="nc">Node</span><span class="o">(</span><span class="nc">Leaf</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">Leaf</span> <span class="mi">3</span><span class="o">)</span> <span class="o">;;</span>
</span><span class='line'><span class="o">-</span> <span class="o">:</span> <span class="kt">int</span> <span class="n">tree</span> <span class="o">=</span> <span class="nc">Node</span> <span class="o">(</span><span class="nc">Leaf</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">Leaf</span> <span class="mi">3</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The REPL tells us this is an <em>int tree</em>, a tree which contains integers at it&rsquo;s nodes and leaves.</p>

<p>And what does it look like?</p>

<p><img src="http://philtomson.github.io/images/happy_tree.png" alt="Alt Our Happy Tree" /></p>

<p>Notice in this case that we&rsquo;ve got a complete tree; we did not use the <em>Empty</em> constructor. What if we had?</p>

<figure class='code'><figcaption><span>[ ] [title: a perhaps less happy little tree ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">#</span> <span class="nc">Node</span><span class="o">(</span><span class="nc">Leaf</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)</span> <span class="o">;;</span>
</span><span class='line'><span class="o">-</span> <span class="o">:</span> <span class="kt">int</span> <span class="n">tree</span> <span class="o">=</span> <span class="nc">Node</span> <span class="o">(</span><span class="nc">Leaf</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="nc">Empty</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we have what is perhaps a less happy little tree. The right branch of our little tree is <em>empty</em>. The <em>Leaf 3</em> has fallen. Now perhaps you can see why we need <em>Empty</em>. <em>Node</em> must have two sub-trees. We can&rsquo;t just do something like:</p>

<figure class='code'><figcaption><span>[ ] [title: an erroneous tree ] </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ocaml'><span class='line'><span class="o">#</span> <span class="nc">Node</span><span class="o">(</span><span class="nc">Leaf</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span> <span class="o">;;</span>
</span><span class='line'><span class="nc">File</span> <span class="s2">&quot;&quot;</span><span class="o">,</span> <span class="n">line</span> <span class="mi">1</span><span class="o">,</span> <span class="n">characters</span> <span class="mi">1</span><span class="o">-</span><span class="mi">16</span><span class="o">:</span>
</span><span class='line'><span class="nc">Error</span><span class="o">:</span> <span class="nc">The</span> <span class="n">constructor</span> <span class="nc">Node</span> <span class="n">expects</span> <span class="mi">3</span> <span class="n">argument</span><span class="o">(</span><span class="n">s</span><span class="o">),</span>
</span><span class='line'>       <span class="n">but</span> <span class="n">is</span> <span class="n">applied</span> <span class="n">here</span> <span class="k">to</span> <span class="mi">2</span> <span class="n">argument</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because the <em>Node</em> constructor expects to have three components. So <em>Empty</em> is used to designate the absense of a <em>Node</em> or <em>Leaf</em>.</p>

<p>How did I draw that tree above? That&rsquo;ll have to wait for the next Tree Medititation installment when we&rsquo;ll discuss things like <em>tree traversal</em> and generating <em>dot files</em> used by <a href="http://www.graphviz.org/">Graphviz</a> to create images.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Dusty Corner #5379: 0 Is Sometimes a Special Number]]></title>
    <link href="http://philtomson.github.io/blog/2014/03/07/c-plus-plus-dusty-corner-number-537-0-is-sometimes-a-special/"/>
    <updated>2014-03-07T08:57:00-08:00</updated>
    <id>http://philtomson.github.io/blog/2014/03/07/c-plus-plus-dusty-corner-number-537-0-is-sometimes-a-special</id>
    <content type="html"><![CDATA[<p>I recently discovered the <a href="http://cppquiz.org/">C++ Quiz site</a> and
figuring that it&rsquo;s always good to practice C++ skills I started going
through the questions. The third question I
encountered gave me some pause&hellip;  The question was:</p>

<pre><code>According to the C++11 standard, what is the output of this program?

#include &lt;iostream&gt;

void print(char const *str) { std::cout &lt;&lt; str; }
void print(short num) { std::cout &lt;&lt; num; }

int main() {
  print("abc");
  print(0);
  print('A');
}
</code></pre>

<p>Now the obvious response would be &ldquo;abc065&rdquo;, but I suspected there was some
sort of trickery afoot here. Finally, I just entered &ldquo;abc065&rdquo; and of course
my suspicion was right: the answer was incorrect. Then I went ahead and
&ldquo;cheated&rdquo; by pasting the code into a file and compiling it:</p>

<pre><code>$ g++ -o quiz1 quiz1.cpp
quiz1.cpp: In function ‘int main()’:
quiz1.cpp:9:10: error: call of overloaded ‘print(int)’ is ambiguous
print(0);
      ^
quiz1.cpp:9:10: note: candidates are:
quiz1.cpp:4:6: note: void print(const char*)
void print(char const *str) { std::cout &lt;&lt; str; }
quiz1.cpp:5:6: note: void print(short int)
void print(short num) { std::cout &lt;&lt; num; }
</code></pre>

<p><em>&ldquo;Umm&hellip; ok&rdquo;</em>, I thought <em>&ldquo;shouldn&rsquo;t the int literal 0 be cast to a short
automatically? What gives here?&rdquo;</em>. Maybe clang will give me a more
descriptive error message? It&rsquo;s known for that, right?</p>

<pre><code>$ clang++  -o quiz1 quiz1.cpp
quiz1.cpp:9:3: error: call to 'print' is ambiguous
print(0);
      ^~~~~
quiz1.cpp:4:6: note: candidate function
void print(char const *str) { std::cout &lt;&lt; str; }
quiz1.cpp:5:6: note: candidate function
void print(short num) { std::cout &lt;&lt; num; }
</code></pre>

<p>Ok, so clang didn&rsquo;t reveal any new information here&hellip; other than
those fancy tildas. So I went back to the CPP Quiz site and chose
&ldquo;has compilation error&rdquo; and clicked &lsquo;Answer&rsquo; to get the explanation:</p>

<pre><code>Sneaky ambiguous function call.

The statement print(0); is ambiguous due to overload resolution rules. 
Both print functions are viable, but for the compiler to pick one, 
one of them has to have a better conversion sequence than the other. 
§13.3.3¶2: "If there is exactly one viable function that is a better 
function than all other viable functions, then it is the one selected 
by overload resolution; otherwise the call is ill-formed".

(a) *Because 0 is a null pointer constant[1], it can be converted 
implicitly into any pointer type with a single conversion.*

(b) Because 0 is of type int, it can be converted implicitly to a 
short with a single conversion too.

In our case, both are standard conversion sequences with a single 
conversion of "conversion rank". Since no function is better than 
the other, the call is ill-formed.

[1] §4.10¶1 A null pointer constant is an integral constant expression 
(5.19) prvalue of integer type that evaluates to zero(...) A null 
pointer constant can be converted to a pointer type.
</code></pre>

<p>Ooookaaayy&hellip; so this is one of those occasions where being a C++ programmer
is very much akin to being a lawyer: you need to be up on all of the
provisos, caveats and special exemptions in the law (or in the spec in this
case).</p>

<p>So what happened? Passing &lsquo;0&rsquo; to the <em>print</em> function can interpretted as
either passing a null pointer to the first <em>print</em> function or as a short
0 to the second, overloaded <em>print</em> function. Ok, so couldn&rsquo;t any
integer being passed to the print function also be interpreted as possibly
being a pointer?  So as an experiment I changed:</p>

<pre><code>print(0);
</code></pre>

<p>To:
    print(2);</p>

<p>Of course, then it compiles just fine. So &lsquo;0&rsquo; is a <em>special</em> number in this
context because it&rsquo;s also the null pointer constant.</p>

<p>If you are a programming polyglot like me, your first reaction upon realizing
this is probably to want to run to the relative safety of gated communities
such as OCaml, Haskell or maybe Python where these kinds of incidents
just don&rsquo;t happen (because no pointers -> no NULL -> no special case for 0).
&hellip;until you realize that those neighborhoods have their own, different
quirks and in fact there&rsquo;s no perfect language (well, except for Lisp,
maybe, but <em>which Lisp?</em>).</p>

<p>Sometimes you&rsquo;ve gotta hang out in the C++ hood with all of the sirens
and gunshots in the background in order to get things done. As always, you
just need to be very wary while you&rsquo;re in the C++ hood in order to survive.
Fortunately, in this case it&rsquo;s just a compilation error that seems rather
confusing at first, not a segfault.</p>

<p>Sure it&rsquo;s definitely strange that 0 is a special case integer in this
context, but to be fair, how often would you actually run into this
situation in C++? I&rsquo;d guess it would be very rare. In most cases you
wouldn&rsquo;t be passing a &lsquo;0&rsquo; literal to a function like that - you&rsquo;d instead
be passing in a variable and even if that variable contains &lsquo;0&rsquo;, that&rsquo;s
just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Growth Really an End in Itself?]]></title>
    <link href="http://philtomson.github.io/blog/2013/04/28/is-growth-really-an-end-in-itself/"/>
    <updated>2013-04-28T12:04:00-07:00</updated>
    <id>http://philtomson.github.io/blog/2013/04/28/is-growth-really-an-end-in-itself</id>
    <content type="html"><![CDATA[<p>I had an interview at a startup downtown this last week. This company has revenue and is selling stuff.  At one point I asked the Director of Engineering: &ldquo;So, is the company profitable?&rdquo;.  Apparently this wasn&rsquo;t the right question to ask.  His response was they weren&rsquo;t trying to be profitable, they were trying to grow.  As I was pondering this later it seemed odd to want growth over profitability.  But apparently in the topsy-turvy world of venture capital funded startups this makes some kind of sense.</p>

<p>But still, I kind of wonder about  this idea of  growth for growth&rsquo;s sake.  Isn&rsquo;t that kind of how cancer works?  Or maybe kind of like the growth caused by high fructose corn syrup?</p>

<p>The thing is, these VC funded startups seem to be getting all the press, whereas companies that aren&rsquo;t obsessed with growth tend to fly completely under the radar.  My wife worked for a small software company for most of the 90&rsquo;s that made scientific visualization software for the Mac.  They primarily sell into Universities &amp; Government research facilities.  It&rsquo;s a small niche, but for the last 20 years or so they&rsquo;ve employed between 5 and 8 software engineers.  They still employ about that many people and probably will for another 10 years or so.  They&rsquo;re not worried about growth, they want sustainability.  And they always seemed to be having a good time.  Most of the people working there have been there for close to 20 years now.  It&rsquo;s interesting, steady work that seems to pay well.   Sure, they could have gone out and tried to get VC to “expand into new markets”&hellip; but it&rsquo;s probable that if they had done that, they wouldn&rsquo;t exist now.  They may have been bought and rolled into a larger company and most of the people working there would have left soon after that or rapid growth could have caused it to crash and burn.  No, instead they&rsquo;ve chosen the sustainable path.  Good on them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Graphics Module in the OCaml Toplevel]]></title>
    <link href="http://philtomson.github.io/blog/2013/01/01/using-the-graphics-module-in-ocaml/"/>
    <updated>2013-01-01T12:33:00-08:00</updated>
    <id>http://philtomson.github.io/blog/2013/01/01/using-the-graphics-module-in-ocaml</id>
    <content type="html"><![CDATA[<div><script src='https://gist.github.com/3940124.js'></script>
<noscript><pre><code>(* SEE: http://mirror.ocamlcore.org/wiki.cocan.org/tips_for_using_the_ocaml_toplevel.html *)

$ ocaml
# #use &quot;topfind&quot; ;;
Findlib has been successfully loaded. Additional directives:
  #require &quot;package&quot;;;      to load a package
  #list;;                   to list the available packages
  #camlp4o;;                to load camlp4 (standard syntax)
  #camlp4r;;                to load camlp4 (revised syntax)
  #predicates &quot;p,q,...&quot;;;   to set these predicates
  Topfind.reset();;         to force that packages will be reloaded
  #thread;;                 to enable threads

- : unit = ()

# #list ;;  (* list available packages *)

# #require &quot;graphics&quot; ;;
# open Graphics ;;
# open_graph &quot; 640x480&quot;;;
# draw_circle 250 250 20; draw_circle 350 250 20; draw_circle 300 200 120; draw_arc 300 200 60 60 180 360;</code></pre></noscript></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://philtomson.github.io/blog/2013/01/01/first-post/"/>
    <updated>2013-01-01T12:04:00-08:00</updated>
    <id>http://philtomson.github.io/blog/2013/01/01/first-post</id>
    <content type="html"><![CDATA[<p>This is my GitHub blog.</p>

<p>Here&rsquo;s a test code snippet:</p>

<figure class='code'><figcaption><span>Discover if a number is prime </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Fixnum</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">prime?</span>
</span><span class='line'>    <span class="p">(</span><span class="s1">&#39;1&#39;</span> <span class="o">*</span> <span class="nb">self</span><span class="p">)</span> <span class="o">!~</span> <span class="sr">/^1?$|^(11+?)\1+$/</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Test Gist embedding:</p>

<div><script src='https://gist.github.com/2629106.js'></script>
<noscript><pre><code>(* POSET probably works better than RING here  *)
module type RING = 
  sig
    type t
    val max : t
    val min : t
    val succ : t -&gt; t
    val val_to_s : t -&gt; string
  end


(* Create a &quot;counter&quot; which is a list of values of type RING *)
module Counter (V_type : RING) = 
  struct 
  include V_type
  let rec next ops = match ops with
      [] -&gt; []
    | o::os -&gt; if o = max then
                 (succ o)::(next os)
               else
                 (succ o)::os 

  let rec max_val vs = List.for_all (fun x -&gt; (x = max)) vs



 let to_s_lst opslst = 
    List.rev (List.map (fun x -&gt; val_to_s x) opslst) 

  let to_s opslst = 
    let los = to_s_lst opslst in
    String.concat &quot;,&quot; los

  let count_full vs = 
    let count = ref vs in
    while ( not (max_val !count )) do
      Printf.printf &quot;%s\n&quot; (to_s !count);
      count := next !count
    done ;
    (* one last time *)
    Printf.printf &quot;%s\n&quot; (to_s !count);
      
  end

module Ops = 
  struct
    type t = C | P | M | T | D 

    let max = D

    let min = C

    let val_to_s o = match o with
        C -&gt; &quot;C&quot;
      | P -&gt; &quot;+&quot;
      | M -&gt; &quot;-&quot;
      | T -&gt; &quot;*&quot;
      | D -&gt; &quot;/&quot; 

    let succ o = match o with
      | C -&gt; P
      | P -&gt; M
      | M -&gt; T
      | T -&gt; D  
      | D -&gt; C 

  end

module Binary = 
  struct
    type t = F | T 
    let max = T
    let min = F

    let val_to_s b = match b with 
      F -&gt; &quot;F&quot;
    | T -&gt; &quot;T&quot; 

    let succ b = match b with
      F -&gt; T
    | T -&gt; F

  end


  module OpCounter = Counter(Ops)

  module BinCounter = Counter(Binary)



  open OpCounter
  open Ops

let test = next (next (next (next (next (next (next (next (next (next
[C;C;C]))))))))) ;;
let test_str = to_s test;;
Printf.printf &quot;[%s]\n&quot; (test_str) ;;
count_full [C;C;C] ;;

  open BinCounter
  open Binary
let test = next (next (next (next (next (next (next (next (next (next
[F;F;F;F]))))))))) ;;
let test_str = to_s test;;
Printf.printf &quot;[%s]\n&quot; (test_str) ;;
count_full [F;F;F] ;;
</code></pre></noscript></div>



]]></content>
  </entry>
  
</feed>
